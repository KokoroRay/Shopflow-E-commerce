<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ShopFlow.Domain</name>
    </assembly>
    <members>
        <member name="T:ShopFlow.Domain.DomainEvents.PasswordResetConfirmedEvent">
            <summary>
            Domain event raised when a user successfully resets their password
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.DomainEvents.PasswordResetConfirmedEvent.UserId">
            <summary>
            Gets the ID of the user who reset their password
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.DomainEvents.PasswordResetConfirmedEvent.Email">
            <summary>
            Gets the email address of the user
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.DomainEvents.PasswordResetConfirmedEvent.ResetAt">
            <summary>
            Gets the timestamp when the password was reset
            </summary>
        </member>
        <member name="M:ShopFlow.Domain.DomainEvents.PasswordResetConfirmedEvent.#ctor(System.Int64,System.String,System.DateTime)">
            <summary>
            Initializes a new instance of the PasswordResetConfirmedEvent
            </summary>
            <param name="userId">The ID of the user who reset their password</param>
            <param name="email">The email address of the user</param>
            <param name="resetAt">The timestamp when the password was reset</param>
        </member>
        <member name="M:ShopFlow.Domain.DomainEvents.PasswordResetConfirmedEvent.ToString">
            <summary>
            Returns a string representation of the event
            </summary>
        </member>
        <member name="T:ShopFlow.Domain.DomainEvents.PasswordResetRequestedEvent">
            <summary>
            Domain event raised when a user requests a password reset
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.DomainEvents.PasswordResetRequestedEvent.UserId">
            <summary>
            Gets the ID of the user who requested password reset
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.DomainEvents.PasswordResetRequestedEvent.Email">
            <summary>
            Gets the email address of the user
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.DomainEvents.PasswordResetRequestedEvent.OtpCode">
            <summary>
            Gets the OTP code for password reset
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.DomainEvents.PasswordResetRequestedEvent.ExpiresAt">
            <summary>
            Gets the expiration time for the OTP
            </summary>
        </member>
        <member name="M:ShopFlow.Domain.DomainEvents.PasswordResetRequestedEvent.#ctor(System.Int64,System.String,System.String,System.DateTime)">
            <summary>
            Initializes a new instance of the PasswordResetRequestedEvent
            </summary>
            <param name="userId">The ID of the user requesting password reset</param>
            <param name="email">The email address of the user</param>
            <param name="otpCode">The OTP code for verification</param>
            <param name="expiresAt">The expiration time for the OTP</param>
        </member>
        <member name="M:ShopFlow.Domain.DomainEvents.PasswordResetRequestedEvent.#ctor(System.Int64,ShopFlow.Domain.ValueObjects.Email,System.String,System.DateTime)">
            <summary>
            Initializes a new instance with Email value object
            </summary>
            <param name="userId">The ID of the user requesting password reset</param>
            <param name="email">The email value object of the user</param>
            <param name="otpCode">The OTP code for verification</param>
            <param name="expiresAt">The expiration time for the OTP</param>
        </member>
        <member name="M:ShopFlow.Domain.DomainEvents.PasswordResetRequestedEvent.ToString">
            <summary>
            Returns a string representation of the event
            </summary>
        </member>
        <member name="T:ShopFlow.Domain.DomainEvents.UserEmailVerifiedEvent">
            <summary>
            Domain event raised when a user's email is verified
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.DomainEvents.UserEmailVerifiedEvent.UserId">
            <summary>
            Gets the ID of the user whose email was verified
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.DomainEvents.UserEmailVerifiedEvent.Email">
            <summary>
            Gets the verified email address
            </summary>
        </member>
        <member name="M:ShopFlow.Domain.DomainEvents.UserEmailVerifiedEvent.#ctor(System.Int64,System.String)">
            <summary>
            Initializes a new instance of the UserEmailVerifiedEvent
            </summary>
            <param name="userId">The ID of the user whose email was verified</param>
            <param name="email">The verified email address</param>
        </member>
        <member name="M:ShopFlow.Domain.DomainEvents.UserEmailVerifiedEvent.ToString">
            <summary>
            Returns a string representation of the event
            </summary>
        </member>
        <member name="T:ShopFlow.Domain.DomainEvents.UserRegisteredEvent">
            <summary>
            Domain event raised when a user registers successfully
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.DomainEvents.UserRegisteredEvent.UserId">
            <summary>
            Gets the ID of the newly registered user
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.DomainEvents.UserRegisteredEvent.Email">
            <summary>
            Gets the email address of the registered user
            </summary>
        </member>
        <member name="M:ShopFlow.Domain.DomainEvents.UserRegisteredEvent.#ctor(System.Int64,System.String)">
            <summary>
            Initializes a new instance of the UserRegisteredEvent
            </summary>
            <param name="userId">The ID of the newly registered user</param>
            <param name="email">The email address of the registered user as string</param>
        </member>
        <member name="M:ShopFlow.Domain.DomainEvents.UserRegisteredEvent.#ctor(System.Int64,ShopFlow.Domain.ValueObjects.Email)">
            <summary>
            Initializes a new instance of the UserRegisteredEvent with Email value object
            </summary>
            <param name="userId">The ID of the newly registered user</param>
            <param name="email">The email value object of the registered user</param>
        </member>
        <member name="M:ShopFlow.Domain.DomainEvents.UserRegisteredEvent.ToString">
            <summary>
            Returns a string representation of the event
            </summary>
        </member>
        <member name="T:ShopFlow.Domain.Entities.Cart">
            <summary>
            Represents a shopping cart entity
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.Entities.Cart.Id">
            <summary>
            Gets or sets the cart identifier
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.Entities.Cart.UserId">
            <summary>
            Gets or sets the user identifier (null for guest carts)
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.Entities.Cart.GuestToken">
            <summary>
            Gets or sets the guest token for anonymous carts
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.Entities.Cart.Currency">
            <summary>
            Gets or sets the cart currency
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.Entities.Cart.WarehouseId">
            <summary>
            Gets or sets the warehouse identifier
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.Entities.Cart.TotalsJson">
            <summary>
            Gets or sets the JSON representation of cart totals
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.Entities.Cart.LastActivityAt">
            <summary>
            Gets or sets the last activity timestamp
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.Entities.Cart.CartAppliedPromos">
            <summary>
            Gets the collection of applied promotional codes
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.Entities.Cart.CartItems">
            <summary>
            Gets the collection of cart items
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.Entities.Cart.InvReservations">
            <summary>
            Gets the collection of inventory reservations
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.Entities.Cart.PromoApplicationLogs">
            <summary>
            Gets the collection of promotion application logs
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.Entities.Cart.SysWebhookEvents">
            <summary>
            Gets the collection of webhook events
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.Entities.Cart.User">
            <summary>
            Gets or sets the associated user
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.Entities.Cart.Warehouse">
            <summary>
            Gets or sets the associated warehouse
            </summary>
        </member>
        <member name="T:ShopFlow.Domain.Entities.PasswordResetToken">
            <summary>
            Entity representing a password reset token with OTP verification
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.Entities.PasswordResetToken.Id">
            <summary>
            Gets the unique identifier for the password reset token
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.Entities.PasswordResetToken.UserId">
            <summary>
            Gets the ID of the user requesting password reset
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.Entities.PasswordResetToken.Email">
            <summary>
            Gets the email address for which the reset was requested
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.Entities.PasswordResetToken.OtpCode">
            <summary>
            Gets the OTP code for verification
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.Entities.PasswordResetToken.CreatedAt">
            <summary>
            Gets when the token was created
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.Entities.PasswordResetToken.ExpiresAt">
            <summary>
            Gets when the token expires
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.Entities.PasswordResetToken.IsUsed">
            <summary>
            Gets whether the token has been used
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.Entities.PasswordResetToken.UsedAt">
            <summary>
            Gets when the token was used (if applicable)
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.Entities.PasswordResetToken.AttemptCount">
            <summary>
            Gets the number of verification attempts
            </summary>
        </member>
        <member name="F:ShopFlow.Domain.Entities.PasswordResetToken.MaxAttempts">
            <summary>
            Gets the maximum allowed attempts before token is locked
            </summary>
        </member>
        <member name="M:ShopFlow.Domain.Entities.PasswordResetToken.#ctor">
            <summary>
            Private constructor for EF Core
            </summary>
        </member>
        <member name="M:ShopFlow.Domain.Entities.PasswordResetToken.#ctor(System.Int64,ShopFlow.Domain.ValueObjects.Email,ShopFlow.Domain.ValueObjects.OtpCode)">
            <summary>
            Initializes a new instance of the PasswordResetToken class
            </summary>
            <param name="userId">The ID of the user requesting password reset</param>
            <param name="email">The email address for the reset request</param>
            <param name="otpCode">The OTP code for verification</param>
        </member>
        <member name="M:ShopFlow.Domain.Entities.PasswordResetToken.IsValid">
            <summary>
            Checks if the token is valid for use
            </summary>
            <returns>True if valid, false otherwise</returns>
        </member>
        <member name="M:ShopFlow.Domain.Entities.PasswordResetToken.IsExpired">
            <summary>
            Checks if the token is expired
            </summary>
            <returns>True if expired, false otherwise</returns>
        </member>
        <member name="M:ShopFlow.Domain.Entities.PasswordResetToken.IsLocked">
            <summary>
            Checks if the token is locked due to too many attempts
            </summary>
            <returns>True if locked, false otherwise</returns>
        </member>
        <member name="M:ShopFlow.Domain.Entities.PasswordResetToken.VerifyOtp(System.String)">
            <summary>
            Verifies the provided OTP code against this token
            </summary>
            <param name="providedOtp">The OTP code to verify</param>
            <returns>True if the OTP matches and token is valid</returns>
        </member>
        <member name="M:ShopFlow.Domain.Entities.PasswordResetToken.MarkAsUsed">
            <summary>
            Marks the token as used
            </summary>
        </member>
        <member name="M:ShopFlow.Domain.Entities.PasswordResetToken.GetRemainingTime">
            <summary>
            Gets the remaining time until expiration
            </summary>
            <returns>TimeSpan representing remaining time</returns>
        </member>
        <member name="M:ShopFlow.Domain.Entities.PasswordResetToken.GetRemainingAttempts">
            <summary>
            Gets the remaining number of attempts
            </summary>
            <returns>Number of remaining attempts</returns>
        </member>
        <member name="M:ShopFlow.Domain.Entities.PasswordResetToken.Create(System.Int64,ShopFlow.Domain.ValueObjects.Email,System.Int32)">
            <summary>
            Creates a new password reset token for the specified user
            </summary>
            <param name="userId">The ID of the user</param>
            <param name="email">The email address</param>
            <param name="expirationMinutes">The expiration time in minutes (default: 15)</param>
            <returns>A new PasswordResetToken instance</returns>
        </member>
        <member name="M:ShopFlow.Domain.Entities.PasswordResetToken.ToString">
            <summary>
            Returns a string representation of the token
            </summary>
        </member>
        <member name="T:ShopFlow.Domain.Enums.PermissionCode">
            <summary>
            Predefined permission codes for the system
            </summary>
        </member>
        <member name="F:ShopFlow.Domain.Enums.PermissionCode.AdminPermissions">
            <summary>
            Gets all admin permissions
            </summary>
        </member>
        <member name="F:ShopFlow.Domain.Enums.PermissionCode.ModeratorPermissions">
            <summary>
            Gets moderator permissions
            </summary>
        </member>
        <member name="F:ShopFlow.Domain.Enums.PermissionCode.CustomerPermissions">
            <summary>
            Gets customer permissions
            </summary>
        </member>
        <member name="F:ShopFlow.Domain.Enums.PermissionCode.VendorStaffPermissions">
            <summary>
            Gets vendor staff permissions
            </summary>
        </member>
        <member name="F:ShopFlow.Domain.Enums.PermissionCode.WarehouseStaffPermissions">
            <summary>
            Gets warehouse staff permissions
            </summary>
        </member>
        <member name="T:ShopFlow.Domain.Enums.RoleCode">
            <summary>
            Predefined role codes for the system
            </summary>
        </member>
        <member name="F:ShopFlow.Domain.Enums.RoleCode.ADMIN">
            <summary>
            System administrator with full access
            </summary>
        </member>
        <member name="F:ShopFlow.Domain.Enums.RoleCode.MODERATOR">
            <summary>
            Content moderator with review and moderation permissions
            </summary>
        </member>
        <member name="F:ShopFlow.Domain.Enums.RoleCode.CUSTOMER">
            <summary>
            Regular customer user
            </summary>
        </member>
        <member name="F:ShopFlow.Domain.Enums.RoleCode.VENDOR_STAFF">
            <summary>
            Vendor staff managing vendor products and orders
            </summary>
        </member>
        <member name="F:ShopFlow.Domain.Enums.RoleCode.WAREHOUSE_STAFF">
            <summary>
            Warehouse staff managing inventory and logistics
            </summary>
        </member>
        <member name="F:ShopFlow.Domain.Enums.RoleCode.GUEST">
            <summary>
            Guest user with limited access (for future use)
            </summary>
        </member>
        <member name="F:ShopFlow.Domain.Enums.RoleCode.AllRoles">
            <summary>
            Gets all valid role codes
            </summary>
        </member>
        <member name="F:ShopFlow.Domain.Enums.RoleCode.StaffRoles">
            <summary>
            Gets staff role codes (roles with management permissions)
            </summary>
        </member>
        <member name="F:ShopFlow.Domain.Enums.RoleCode.CustomerRoles">
            <summary>
            Gets customer role codes
            </summary>
        </member>
        <member name="T:ShopFlow.Domain.Infrastructure.IDomainEventDispatcher">
            <summary>
            Abstraction for publishing domain events without external dependencies
            </summary>
        </member>
        <member name="T:ShopFlow.Domain.Infrastructure.IDomainEventHandler`1">
            <summary>
            Abstraction for handling domain events without external dependencies
            </summary>
            <typeparam name="TDomainEvent">The type of domain event to handle</typeparam>
        </member>
        <member name="T:ShopFlow.Domain.ValueObjects.Email">
            <summary>
            Value object representing an email address with validation
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.ValueObjects.Email.Value">
            <summary>
            Gets the normalized email value
            </summary>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.Email.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Email class
            </summary>
            <param name="value">The email string to validate and normalize</param>
            <exception cref="T:System.ArgumentException">Thrown when email is invalid</exception>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.Email.IsValid(System.String)">
            <summary>
            Validates if a string is a valid email format
            </summary>
            <param name="email">Email string to validate</param>
            <returns>True if valid, false otherwise</returns>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.Email.FromString(System.String)">
            <summary>
            Creates an Email from a string value
            </summary>
            <param name="value">The email string</param>
            <returns>Email instance</returns>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.Email.op_Implicit(ShopFlow.Domain.ValueObjects.Email)~System.String">
            <summary>
            Converts Email to string implicitly
            </summary>
            <param name="email">Email instance</param>
            <returns>String representation</returns>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.Email.op_Explicit(System.String)~ShopFlow.Domain.ValueObjects.Email">
            <summary>
            Converts string to Email explicitly
            </summary>
            <param name="value">String value</param>
            <returns>Email instance</returns>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.Email.Equals(ShopFlow.Domain.ValueObjects.Email)">
            <summary>
            Determines whether this instance and another Email are equal
            </summary>
            <param name="other">Email to compare with</param>
            <returns>True if equal, false otherwise</returns>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.Email.Equals(System.Object)">
            <summary>
            Determines whether this instance and the specified object are equal
            </summary>
            <param name="obj">Object to compare with</param>
            <returns>True if equal, false otherwise</returns>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.Email.GetHashCode">
            <summary>
            Gets the hash code for this instance
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.Email.ToString">
            <summary>
            Returns the string representation of the email
            </summary>
            <returns>Email value as string</returns>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.Email.op_Equality(ShopFlow.Domain.ValueObjects.Email,ShopFlow.Domain.ValueObjects.Email)">
            <summary>
            Determines whether two Email instances are equal
            </summary>
            <param name="left">Left operand</param>
            <param name="right">Right operand</param>
            <returns>True if equal, false otherwise</returns>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.Email.op_Inequality(ShopFlow.Domain.ValueObjects.Email,ShopFlow.Domain.ValueObjects.Email)">
            <summary>
            Determines whether two Email instances are not equal
            </summary>
            <param name="left">Left operand</param>
            <param name="right">Right operand</param>
            <returns>True if not equal, false otherwise</returns>
        </member>
        <member name="T:ShopFlow.Domain.ValueObjects.OtpCode">
            <summary>
            Value object representing an OTP (One-Time Password) code
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.ValueObjects.OtpCode.Value">
            <summary>
            Gets the OTP code value
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.ValueObjects.OtpCode.GeneratedAt">
            <summary>
            Gets when the OTP was generated
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.ValueObjects.OtpCode.ExpiresAt">
            <summary>
            Gets when the OTP expires
            </summary>
        </member>
        <member name="F:ShopFlow.Domain.ValueObjects.OtpCode.DefaultExpirationMinutes">
            <summary>
            Gets the default OTP expiration time in minutes
            </summary>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.OtpCode.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the OtpCode class
            </summary>
            <param name="value">The OTP code value</param>
            <param name="expirationMinutes">The expiration time in minutes (default: 15)</param>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.OtpCode.Generate(System.Int32)">
            <summary>
            Generates a new random 6-digit OTP code
            </summary>
            <param name="expirationMinutes">The expiration time in minutes (default: 15)</param>
            <returns>A new OtpCode instance</returns>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.OtpCode.IsExpired">
            <summary>
            Checks if the OTP code is expired
            </summary>
            <returns>True if expired, false otherwise</returns>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.OtpCode.IsValid">
            <summary>
            Checks if the OTP code is valid (not expired)
            </summary>
            <returns>True if valid, false otherwise</returns>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.OtpCode.GetRemainingTime">
            <summary>
            Gets the remaining time until expiration
            </summary>
            <returns>TimeSpan representing remaining time, or TimeSpan.Zero if expired</returns>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.OtpCode.IsValidFormat(System.String)">
            <summary>
            Validates if a string is a valid OTP format
            </summary>
            <param name="otp">OTP string to validate</param>
            <returns>True if valid format, false otherwise</returns>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.OtpCode.GenerateRandomOtp">
            <summary>
            Generates a cryptographically secure random 6-digit OTP
            </summary>
            <returns>6-digit OTP string</returns>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.OtpCode.Equals(ShopFlow.Domain.ValueObjects.OtpCode)">
            <summary>
            Determines whether the specified object is equal to the current object
            </summary>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.OtpCode.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object
            </summary>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.OtpCode.GetHashCode">
            <summary>
            Returns the hash code for this instance
            </summary>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.OtpCode.ToString">
            <summary>
            Returns the string representation of the OTP code
            </summary>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.OtpCode.op_Implicit(ShopFlow.Domain.ValueObjects.OtpCode)~System.String">
            <summary>
            Implicit conversion from OtpCode to string
            </summary>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.OtpCode.op_Explicit(System.String)~ShopFlow.Domain.ValueObjects.OtpCode">
            <summary>
            Explicit conversion from string to OtpCode
            </summary>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.OtpCode.op_Equality(ShopFlow.Domain.ValueObjects.OtpCode,ShopFlow.Domain.ValueObjects.OtpCode)">
            <summary>
            Equality operator
            </summary>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.OtpCode.op_Inequality(ShopFlow.Domain.ValueObjects.OtpCode,ShopFlow.Domain.ValueObjects.OtpCode)">
            <summary>
            Inequality operator
            </summary>
        </member>
        <member name="T:ShopFlow.Domain.ValueObjects.PhoneNumber">
            <summary>
            Value object representing a Vietnamese phone number
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.ValueObjects.PhoneNumber.Value">
            <summary>
            Gets the normalized phone number value
            </summary>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.PhoneNumber.#ctor(System.String)">
            <summary>
            Initializes a new instance of the PhoneNumber class
            </summary>
            <param name="value">The phone number string to validate and normalize</param>
            <exception cref="T:System.ArgumentException">Thrown when phone number is invalid</exception>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.PhoneNumber.op_Implicit(ShopFlow.Domain.ValueObjects.PhoneNumber)~System.String">
            <summary>
            Implicitly converts PhoneNumber to string
            </summary>
            <param name="phone">The phone number to convert</param>
            <returns>The phone number string value</returns>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.PhoneNumber.op_Explicit(System.String)~ShopFlow.Domain.ValueObjects.PhoneNumber">
            <summary>
            Explicitly converts string to PhoneNumber
            </summary>
            <param name="value">The string value to convert</param>
            <returns>A new PhoneNumber instance</returns>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.PhoneNumber.FromString(System.String)">
            <summary>
            Converts string to PhoneNumber - alternative to explicit operator
            </summary>
            <param name="value">The string value to convert</param>
            <returns>A new PhoneNumber instance</returns>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.PhoneNumber.ToPhoneNumber">
            <summary>
            Converts PhoneNumber to string - alternative to implicit operator
            </summary>
            <returns>The phone number string value</returns>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.PhoneNumber.Equals(ShopFlow.Domain.ValueObjects.PhoneNumber)">
            <summary>
            Determines whether the specified PhoneNumber is equal to the current PhoneNumber
            </summary>
            <param name="other">The PhoneNumber to compare with the current PhoneNumber</param>
            <returns>true if the specified PhoneNumber is equal to the current PhoneNumber; otherwise, false</returns>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.PhoneNumber.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current PhoneNumber
            </summary>
            <param name="obj">The object to compare with the current PhoneNumber</param>
            <returns>true if the specified object is equal to the current PhoneNumber; otherwise, false</returns>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.PhoneNumber.GetHashCode">
            <summary>
            Serves as the hash function for PhoneNumber
            </summary>
            <returns>A hash code for the current PhoneNumber</returns>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.PhoneNumber.ToString">
            <summary>
            Returns a string representation of the phone number
            </summary>
            <returns>The phone number string value</returns>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.PhoneNumber.op_Equality(ShopFlow.Domain.ValueObjects.PhoneNumber,ShopFlow.Domain.ValueObjects.PhoneNumber)">
            <summary>
            Determines whether two PhoneNumber instances are equal
            </summary>
            <param name="left">The first PhoneNumber to compare</param>
            <param name="right">The second PhoneNumber to compare</param>
            <returns>true if the PhoneNumbers are equal; otherwise, false</returns>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.PhoneNumber.op_Inequality(ShopFlow.Domain.ValueObjects.PhoneNumber,ShopFlow.Domain.ValueObjects.PhoneNumber)">
            <summary>
            Determines whether two PhoneNumber instances are not equal
            </summary>
            <param name="left">The first PhoneNumber to compare</param>
            <param name="right">The second PhoneNumber to compare</param>
            <returns>true if the PhoneNumbers are not equal; otherwise, false</returns>
        </member>
    </members>
</doc>
