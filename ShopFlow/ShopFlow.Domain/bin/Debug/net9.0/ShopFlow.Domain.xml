<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ShopFlow.Domain</name>
    </assembly>
    <members>
        <member name="T:ShopFlow.Domain.DomainEvents.CategoryCreatedEvent">
            <summary>
            Domain event raised when a new category is created
            </summary>
        </member>
        <member name="T:ShopFlow.Domain.DomainEvents.CategoryDeletedEvent">
            <summary>
            Domain event raised when a category is deleted
            </summary>
        </member>
        <member name="T:ShopFlow.Domain.DomainEvents.CategoryParentChangedEvent">
            <summary>
            Domain event raised when a category parent is changed
            </summary>
        </member>
        <member name="T:ShopFlow.Domain.DomainEvents.CategorySlugChangedEvent">
            <summary>
            Domain event raised when a category slug is changed
            </summary>
        </member>
        <member name="T:ShopFlow.Domain.DomainEvents.CategoryStatusChangedEvent">
            <summary>
            Domain event raised when a category status is changed
            </summary>
        </member>
        <member name="T:ShopFlow.Domain.DomainEvents.CategoryUpdatedEvent">
            <summary>
            Domain event raised when a category is updated
            </summary>
        </member>
        <member name="T:ShopFlow.Domain.DomainEvents.PasswordResetConfirmedEvent">
            <summary>
            Domain event raised when a user successfully resets their password
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.DomainEvents.PasswordResetConfirmedEvent.UserId">
            <summary>
            Gets the ID of the user who reset their password
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.DomainEvents.PasswordResetConfirmedEvent.Email">
            <summary>
            Gets the email address of the user
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.DomainEvents.PasswordResetConfirmedEvent.ResetAt">
            <summary>
            Gets the timestamp when the password was reset
            </summary>
        </member>
        <member name="M:ShopFlow.Domain.DomainEvents.PasswordResetConfirmedEvent.#ctor(System.Int64,System.String,System.DateTime)">
            <summary>
            Initializes a new instance of the PasswordResetConfirmedEvent
            </summary>
            <param name="userId">The ID of the user who reset their password</param>
            <param name="email">The email address of the user</param>
            <param name="resetAt">The timestamp when the password was reset</param>
        </member>
        <member name="M:ShopFlow.Domain.DomainEvents.PasswordResetConfirmedEvent.ToString">
            <summary>
            Returns a string representation of the event
            </summary>
        </member>
        <member name="T:ShopFlow.Domain.DomainEvents.PasswordResetRequestedEvent">
            <summary>
            Domain event raised when a user requests a password reset
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.DomainEvents.PasswordResetRequestedEvent.UserId">
            <summary>
            Gets the ID of the user who requested password reset
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.DomainEvents.PasswordResetRequestedEvent.Email">
            <summary>
            Gets the email address of the user
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.DomainEvents.PasswordResetRequestedEvent.OtpCode">
            <summary>
            Gets the OTP code for password reset
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.DomainEvents.PasswordResetRequestedEvent.ExpiresAt">
            <summary>
            Gets the expiration time for the OTP
            </summary>
        </member>
        <member name="M:ShopFlow.Domain.DomainEvents.PasswordResetRequestedEvent.#ctor(System.Int64,System.String,System.String,System.DateTime)">
            <summary>
            Initializes a new instance of the PasswordResetRequestedEvent
            </summary>
            <param name="userId">The ID of the user requesting password reset</param>
            <param name="email">The email address of the user</param>
            <param name="otpCode">The OTP code for verification</param>
            <param name="expiresAt">The expiration time for the OTP</param>
        </member>
        <member name="M:ShopFlow.Domain.DomainEvents.PasswordResetRequestedEvent.#ctor(System.Int64,ShopFlow.Domain.ValueObjects.Email,System.String,System.DateTime)">
            <summary>
            Initializes a new instance with Email value object
            </summary>
            <param name="userId">The ID of the user requesting password reset</param>
            <param name="email">The email value object of the user</param>
            <param name="otpCode">The OTP code for verification</param>
            <param name="expiresAt">The expiration time for the OTP</param>
        </member>
        <member name="M:ShopFlow.Domain.DomainEvents.PasswordResetRequestedEvent.ToString">
            <summary>
            Returns a string representation of the event
            </summary>
        </member>
        <member name="T:ShopFlow.Domain.DomainEvents.UserEmailVerifiedEvent">
            <summary>
            Domain event raised when a user's email is verified
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.DomainEvents.UserEmailVerifiedEvent.UserId">
            <summary>
            Gets the ID of the user whose email was verified
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.DomainEvents.UserEmailVerifiedEvent.Email">
            <summary>
            Gets the verified email address
            </summary>
        </member>
        <member name="M:ShopFlow.Domain.DomainEvents.UserEmailVerifiedEvent.#ctor(System.Int64,System.String)">
            <summary>
            Initializes a new instance of the UserEmailVerifiedEvent
            </summary>
            <param name="userId">The ID of the user whose email was verified</param>
            <param name="email">The verified email address</param>
        </member>
        <member name="M:ShopFlow.Domain.DomainEvents.UserEmailVerifiedEvent.ToString">
            <summary>
            Returns a string representation of the event
            </summary>
        </member>
        <member name="T:ShopFlow.Domain.DomainEvents.UserRegisteredEvent">
            <summary>
            Domain event raised when a user registers successfully
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.DomainEvents.UserRegisteredEvent.UserId">
            <summary>
            Gets the ID of the newly registered user
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.DomainEvents.UserRegisteredEvent.Email">
            <summary>
            Gets the email address of the registered user
            </summary>
        </member>
        <member name="M:ShopFlow.Domain.DomainEvents.UserRegisteredEvent.#ctor(System.Int64,System.String)">
            <summary>
            Initializes a new instance of the UserRegisteredEvent
            </summary>
            <param name="userId">The ID of the newly registered user</param>
            <param name="email">The email address of the registered user as string</param>
        </member>
        <member name="M:ShopFlow.Domain.DomainEvents.UserRegisteredEvent.#ctor(System.Int64,ShopFlow.Domain.ValueObjects.Email)">
            <summary>
            Initializes a new instance of the UserRegisteredEvent with Email value object
            </summary>
            <param name="userId">The ID of the newly registered user</param>
            <param name="email">The email value object of the registered user</param>
        </member>
        <member name="M:ShopFlow.Domain.DomainEvents.UserRegisteredEvent.ToString">
            <summary>
            Returns a string representation of the event
            </summary>
        </member>
        <member name="T:ShopFlow.Domain.Entities.Cart">
            <summary>
            Represents a shopping cart entity
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.Entities.Cart.Id">
            <summary>
            Gets or sets the cart identifier
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.Entities.Cart.UserId">
            <summary>
            Gets or sets the user identifier (null for guest carts)
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.Entities.Cart.GuestToken">
            <summary>
            Gets or sets the guest token for anonymous carts
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.Entities.Cart.Currency">
            <summary>
            Gets or sets the cart currency
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.Entities.Cart.WarehouseId">
            <summary>
            Gets or sets the warehouse identifier
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.Entities.Cart.TotalsJson">
            <summary>
            Gets or sets the JSON representation of cart totals
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.Entities.Cart.LastActivityAt">
            <summary>
            Gets or sets the last activity timestamp
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.Entities.Cart.CartAppliedPromos">
            <summary>
            Gets the collection of applied promotional codes
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.Entities.Cart.CartItems">
            <summary>
            Gets the collection of cart items
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.Entities.Cart.InvReservations">
            <summary>
            Gets the collection of inventory reservations
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.Entities.Cart.PromoApplicationLogs">
            <summary>
            Gets the collection of promotion application logs
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.Entities.Cart.SysWebhookEvents">
            <summary>
            Gets the collection of webhook events
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.Entities.Cart.User">
            <summary>
            Gets or sets the associated user
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.Entities.Cart.Warehouse">
            <summary>
            Gets or sets the associated warehouse
            </summary>
        </member>
        <member name="T:ShopFlow.Domain.Entities.PasswordResetToken">
            <summary>
            Entity representing a password reset token with OTP verification
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.Entities.PasswordResetToken.Id">
            <summary>
            Gets the unique identifier for the password reset token
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.Entities.PasswordResetToken.UserId">
            <summary>
            Gets the ID of the user requesting password reset
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.Entities.PasswordResetToken.Email">
            <summary>
            Gets the email address for which the reset was requested
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.Entities.PasswordResetToken.OtpCode">
            <summary>
            Gets the OTP code for verification
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.Entities.PasswordResetToken.CreatedAt">
            <summary>
            Gets when the token was created
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.Entities.PasswordResetToken.ExpiresAt">
            <summary>
            Gets when the token expires
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.Entities.PasswordResetToken.IsUsed">
            <summary>
            Gets whether the token has been used
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.Entities.PasswordResetToken.UsedAt">
            <summary>
            Gets when the token was used (if applicable)
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.Entities.PasswordResetToken.AttemptCount">
            <summary>
            Gets the number of verification attempts
            </summary>
        </member>
        <member name="F:ShopFlow.Domain.Entities.PasswordResetToken.MaxAttempts">
            <summary>
            Gets the maximum allowed attempts before token is locked
            </summary>
        </member>
        <member name="M:ShopFlow.Domain.Entities.PasswordResetToken.#ctor">
            <summary>
            Private constructor for EF Core
            </summary>
        </member>
        <member name="M:ShopFlow.Domain.Entities.PasswordResetToken.#ctor(System.Int64,ShopFlow.Domain.ValueObjects.Email,ShopFlow.Domain.ValueObjects.OtpCode)">
            <summary>
            Initializes a new instance of the PasswordResetToken class
            </summary>
            <param name="userId">The ID of the user requesting password reset</param>
            <param name="email">The email address for the reset request</param>
            <param name="otpCode">The OTP code for verification</param>
        </member>
        <member name="M:ShopFlow.Domain.Entities.PasswordResetToken.IsValid">
            <summary>
            Checks if the token is valid for use
            </summary>
            <returns>True if valid, false otherwise</returns>
        </member>
        <member name="M:ShopFlow.Domain.Entities.PasswordResetToken.IsExpired">
            <summary>
            Checks if the token is expired
            </summary>
            <returns>True if expired, false otherwise</returns>
        </member>
        <member name="M:ShopFlow.Domain.Entities.PasswordResetToken.IsLocked">
            <summary>
            Checks if the token is locked due to too many attempts
            </summary>
            <returns>True if locked, false otherwise</returns>
        </member>
        <member name="M:ShopFlow.Domain.Entities.PasswordResetToken.VerifyOtp(System.String)">
            <summary>
            Verifies the provided OTP code against this token
            </summary>
            <param name="providedOtp">The OTP code to verify</param>
            <returns>True if the OTP matches and token is valid</returns>
        </member>
        <member name="M:ShopFlow.Domain.Entities.PasswordResetToken.MarkAsUsed">
            <summary>
            Marks the token as used
            </summary>
        </member>
        <member name="M:ShopFlow.Domain.Entities.PasswordResetToken.GetRemainingTime">
            <summary>
            Gets the remaining time until expiration
            </summary>
            <returns>TimeSpan representing remaining time</returns>
        </member>
        <member name="M:ShopFlow.Domain.Entities.PasswordResetToken.GetRemainingAttempts">
            <summary>
            Gets the remaining number of attempts
            </summary>
            <returns>Number of remaining attempts</returns>
        </member>
        <member name="M:ShopFlow.Domain.Entities.PasswordResetToken.Create(System.Int64,ShopFlow.Domain.ValueObjects.Email,System.Int32)">
            <summary>
            Creates a new password reset token for the specified user
            </summary>
            <param name="userId">The ID of the user</param>
            <param name="email">The email address</param>
            <param name="expirationMinutes">The expiration time in minutes (default: 15)</param>
            <returns>A new PasswordResetToken instance</returns>
        </member>
        <member name="M:ShopFlow.Domain.Entities.PasswordResetToken.ToString">
            <summary>
            Returns a string representation of the token
            </summary>
        </member>
        <member name="T:ShopFlow.Domain.Entities.Sku">
            <summary>
            Enhanced SKU entity with Vietnamese marketplace features and business logic
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.Entities.Sku.Id">
            <summary>
            Unique identifier for the SKU
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.Entities.Sku.ProductId">
            <summary>
            Product ID this SKU belongs to
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.Entities.Sku.Code">
            <summary>
            SKU code with Vietnamese marketplace validation
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.Entities.Sku.BarcodeValue">
            <summary>
            Barcode with Vietnamese marketplace standards
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.Entities.Sku.DimensionsValue">
            <summary>
            Product dimensions for shipping calculations
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.Entities.Sku.WeightValue">
            <summary>
            Product weight for shipping calculations
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.Entities.Sku.IsActive">
            <summary>
            Whether the SKU is active and available
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.Entities.Sku.IsAutoGenerated">
            <summary>
            Whether SKU code is auto-generated
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.Entities.Sku.IsBarcodeAutoGenerated">
            <summary>
            Whether barcode is auto-generated
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.Entities.Sku.CostPerUnit">
            <summary>
            Cost per unit for margin calculations
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.Entities.Sku.CreatedAt">
            <summary>
            When the SKU was created
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.Entities.Sku.UpdatedAt">
            <summary>
            When the SKU was last updated
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.Entities.Sku.CreatedBy">
            <summary>
            Who created the SKU
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.Entities.Sku.UpdatedBy">
            <summary>
            Who last updated the SKU
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.Entities.Sku.Product">
            <summary>
            Related product entity
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.Entities.Sku.Media">
            <summary>
            SKU media (images, videos) - read-only collection
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.Entities.Sku.OptionValues">
            <summary>
            SKU option values (color, size, etc.) - read-only collection
            </summary>
        </member>
        <member name="M:ShopFlow.Domain.Entities.Sku.CreateWithAutoCode(System.Int64,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Int32,System.Nullable{System.Int64})">
            <summary>
            Creates a new SKU with auto-generated code
            </summary>
            <param name="productId">Product ID</param>
            <param name="productName">Product name for auto-generation</param>
            <param name="variantOptions">Variant options</param>
            <param name="sequence">Sequence number</param>
            <param name="createdBy">Creator user ID</param>
            <returns>New SKU instance</returns>
        </member>
        <member name="M:ShopFlow.Domain.Entities.Sku.CreateWithManualCode(System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            Creates a new SKU with manual code
            </summary>
            <param name="productId">Product ID</param>
            <param name="skuCode">Manual SKU code</param>
            <param name="createdBy">Creator user ID</param>
            <returns>New SKU instance</returns>
        </member>
        <member name="M:ShopFlow.Domain.Entities.Sku.UpdateCode(System.String,System.Nullable{System.Int64})">
            <summary>
            Updates the SKU code (only allowed for manual codes)
            </summary>
            <param name="newCode">New SKU code</param>
            <param name="updatedBy">Updater user ID</param>
            <exception cref="T:System.InvalidOperationException">When trying to update auto-generated code</exception>
        </member>
        <member name="M:ShopFlow.Domain.Entities.Sku.RegenerateCode(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Int32,System.Nullable{System.Int64})">
            <summary>
            Regenerates auto-generated SKU code
            </summary>
            <param name="productName">Product name</param>
            <param name="variantOptions">Variant options</param>
            <param name="sequence">New sequence number</param>
            <param name="updatedBy">Updater user ID</param>
        </member>
        <member name="M:ShopFlow.Domain.Entities.Sku.SetBarcode(System.String,ShopFlow.Domain.ValueObjects.BarcodeType,System.Nullable{System.Int64})">
            <summary>
            Sets barcode with validation
            </summary>
            <param name="barcode">Barcode value</param>
            <param name="barcodeType">Barcode type</param>
            <param name="updatedBy">Updater user ID</param>
        </member>
        <member name="M:ShopFlow.Domain.Entities.Sku.GenerateVietnameseBarcode(System.String,System.Int32,System.Nullable{System.Int64})">
            <summary>
            Generates Vietnamese EAN13 barcode automatically
            </summary>
            <param name="companyPrefix">Vietnamese company prefix</param>
            <param name="itemReference">Item reference number</param>
            <param name="updatedBy">Updater user ID</param>
        </member>
        <member name="M:ShopFlow.Domain.Entities.Sku.RemoveBarcode(System.Nullable{System.Int64})">
            <summary>
            Removes barcode
            </summary>
            <param name="updatedBy">Updater user ID</param>
        </member>
        <member name="M:ShopFlow.Domain.Entities.Sku.SetDimensions(System.Int32,System.Int32,System.Int32,System.Nullable{System.Int64})">
            <summary>
            Sets product dimensions
            </summary>
            <param name="lengthMm">Length in millimeters</param>
            <param name="widthMm">Width in millimeters</param>
            <param name="heightMm">Height in millimeters</param>
            <param name="updatedBy">Updater user ID</param>
        </member>
        <member name="M:ShopFlow.Domain.Entities.Sku.SetDimensionsFromCm(System.Decimal,System.Decimal,System.Decimal,System.Nullable{System.Int64})">
            <summary>
            Sets product dimensions from centimeters
            </summary>
            <param name="lengthCm">Length in centimeters</param>
            <param name="widthCm">Width in centimeters</param>
            <param name="heightCm">Height in centimeters</param>
            <param name="updatedBy">Updater user ID</param>
        </member>
        <member name="M:ShopFlow.Domain.Entities.Sku.RemoveDimensions(System.Nullable{System.Int64})">
            <summary>
            Removes dimensions
            </summary>
            <param name="updatedBy">Updater user ID</param>
        </member>
        <member name="M:ShopFlow.Domain.Entities.Sku.SetWeight(System.Int32,System.Nullable{System.Int64})">
            <summary>
            Sets product weight
            </summary>
            <param name="grams">Weight in grams</param>
            <param name="updatedBy">Updater user ID</param>
        </member>
        <member name="M:ShopFlow.Domain.Entities.Sku.SetWeightFromKg(System.Decimal,System.Nullable{System.Int64})">
            <summary>
            Sets product weight from kilograms
            </summary>
            <param name="kilograms">Weight in kilograms</param>
            <param name="updatedBy">Updater user ID</param>
        </member>
        <member name="M:ShopFlow.Domain.Entities.Sku.RemoveWeight(System.Nullable{System.Int64})">
            <summary>
            Removes weight
            </summary>
            <param name="updatedBy">Updater user ID</param>
        </member>
        <member name="M:ShopFlow.Domain.Entities.Sku.SetCost(System.Decimal,System.String,System.Nullable{System.Int64})">
            <summary>
            Sets cost per unit
            </summary>
            <param name="amount">Cost amount</param>
            <param name="currency">Currency code</param>
            <param name="updatedBy">Updater user ID</param>
        </member>
        <member name="M:ShopFlow.Domain.Entities.Sku.Activate(System.Nullable{System.Int64})">
            <summary>
            Activates the SKU
            </summary>
            <param name="updatedBy">Updater user ID</param>
        </member>
        <member name="M:ShopFlow.Domain.Entities.Sku.Deactivate(System.Nullable{System.Int64})">
            <summary>
            Deactivates the SKU
            </summary>
            <param name="updatedBy">Updater user ID</param>
        </member>
        <member name="M:ShopFlow.Domain.Entities.Sku.IsShippingEligible">
            <summary>
            Checks if SKU is suitable for shipping within Vietnam
            </summary>
            <returns>true if suitable for shipping</returns>
        </member>
        <member name="M:ShopFlow.Domain.Entities.Sku.GetShippingCostMultiplier">
            <summary>
            Gets estimated shipping cost category
            </summary>
            <returns>Shipping cost multiplier</returns>
        </member>
        <member name="M:ShopFlow.Domain.Entities.Sku.AddMedia(ShopFlow.Domain.Entities.SkuMedia)">
            <summary>
            Adds media to the SKU
            </summary>
            <param name="media">SKU media</param>
        </member>
        <member name="M:ShopFlow.Domain.Entities.Sku.RemoveMedia(System.Int64)">
            <summary>
            Removes media from the SKU
            </summary>
            <param name="mediaId">Media ID to remove</param>
        </member>
        <member name="M:ShopFlow.Domain.Entities.Sku.AddOptionValue(ShopFlow.Domain.Entities.SkuOptionValue)">
            <summary>
            Adds option value to the SKU
            </summary>
            <param name="optionValue">SKU option value</param>
        </member>
        <member name="M:ShopFlow.Domain.Entities.Sku.RemoveOptionValue(System.Int64,System.Int64)">
            <summary>
            Removes option value from the SKU
            </summary>
            <param name="attributeId">Attribute ID</param>
            <param name="optionId">Option ID</param>
        </member>
        <member name="M:ShopFlow.Domain.Entities.Sku.GetDisplayName">
            <summary>
            Gets display name combining product name and variant options
            </summary>
            <returns>Display name for the SKU</returns>
        </member>
        <member name="M:ShopFlow.Domain.Entities.Sku.ValidateCompleteness">
            <summary>
            Validates SKU completeness for Vietnamese marketplace
            </summary>
            <returns>Collection of validation errors</returns>
        </member>
        <member name="T:ShopFlow.Domain.Entities.SkuMedia">
            <summary>
            SKU media entity placeholder (to be implemented)
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.Entities.SkuMedia.Id">
            <summary>
            Media ID
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.Entities.SkuMedia.SkuId">
            <summary>
            SKU ID this media belongs to
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.Entities.SkuMedia.MediaType">
            <summary>
            Type of media (image, video, etc.)
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.Entities.SkuMedia.Url">
            <summary>
            Media URL
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.Entities.SkuMedia.DisplayOrder">
            <summary>
            Display order for sorting
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.Entities.SkuMedia.IsDefault">
            <summary>
            Whether this is the default media
            </summary>
        </member>
        <member name="T:ShopFlow.Domain.Entities.SkuOptionValue">
            <summary>
            SKU option value entity placeholder (to be implemented)
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.Entities.SkuOptionValue.SkuId">
            <summary>
            SKU ID
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.Entities.SkuOptionValue.AttributeId">
            <summary>
            Attribute ID
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.Entities.SkuOptionValue.OptionId">
            <summary>
            Option ID
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.Entities.SkuOptionValue.Attribute">
            <summary>
            Related attribute entity
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.Entities.SkuOptionValue.Option">
            <summary>
            Related option entity
            </summary>
        </member>
        <member name="T:ShopFlow.Domain.Enums.CategoryStatus">
            <summary>
            Represents the status of a category in the system
            </summary>
        </member>
        <member name="F:ShopFlow.Domain.Enums.CategoryStatus.Active">
            <summary>
            Category is active and visible to users
            </summary>
        </member>
        <member name="F:ShopFlow.Domain.Enums.CategoryStatus.Inactive">
            <summary>
            Category is inactive and hidden from users
            </summary>
        </member>
        <member name="F:ShopFlow.Domain.Enums.CategoryStatus.Deleted">
            <summary>
            Category is soft-deleted
            </summary>
        </member>
        <member name="T:ShopFlow.Domain.Enums.PermissionCode">
            <summary>
            Predefined permission codes for the system
            </summary>
        </member>
        <member name="F:ShopFlow.Domain.Enums.PermissionCode.AdminPermissions">
            <summary>
            Gets all admin permissions
            </summary>
        </member>
        <member name="F:ShopFlow.Domain.Enums.PermissionCode.ModeratorPermissions">
            <summary>
            Gets moderator permissions
            </summary>
        </member>
        <member name="F:ShopFlow.Domain.Enums.PermissionCode.CustomerPermissions">
            <summary>
            Gets customer permissions
            </summary>
        </member>
        <member name="F:ShopFlow.Domain.Enums.PermissionCode.VendorStaffPermissions">
            <summary>
            Gets vendor staff permissions
            </summary>
        </member>
        <member name="F:ShopFlow.Domain.Enums.PermissionCode.WarehouseStaffPermissions">
            <summary>
            Gets warehouse staff permissions
            </summary>
        </member>
        <member name="T:ShopFlow.Domain.Enums.RoleCode">
            <summary>
            Predefined role codes for the system
            </summary>
        </member>
        <member name="F:ShopFlow.Domain.Enums.RoleCode.ADMIN">
            <summary>
            System administrator with full access
            </summary>
        </member>
        <member name="F:ShopFlow.Domain.Enums.RoleCode.MODERATOR">
            <summary>
            Content moderator with review and moderation permissions
            </summary>
        </member>
        <member name="F:ShopFlow.Domain.Enums.RoleCode.CUSTOMER">
            <summary>
            Regular customer user
            </summary>
        </member>
        <member name="F:ShopFlow.Domain.Enums.RoleCode.VENDOR_STAFF">
            <summary>
            Vendor staff managing vendor products and orders
            </summary>
        </member>
        <member name="F:ShopFlow.Domain.Enums.RoleCode.WAREHOUSE_STAFF">
            <summary>
            Warehouse staff managing inventory and logistics
            </summary>
        </member>
        <member name="F:ShopFlow.Domain.Enums.RoleCode.GUEST">
            <summary>
            Guest user with limited access (for future use)
            </summary>
        </member>
        <member name="F:ShopFlow.Domain.Enums.RoleCode.AllRoles">
            <summary>
            Gets all valid role codes
            </summary>
        </member>
        <member name="F:ShopFlow.Domain.Enums.RoleCode.StaffRoles">
            <summary>
            Gets staff role codes (roles with management permissions)
            </summary>
        </member>
        <member name="F:ShopFlow.Domain.Enums.RoleCode.CustomerRoles">
            <summary>
            Gets customer role codes
            </summary>
        </member>
        <member name="T:ShopFlow.Domain.Exceptions.DomainException">
            <summary>
            Base domain exception for business rule violations
            </summary>
        </member>
        <member name="T:ShopFlow.Domain.Infrastructure.IDomainEventDispatcher">
            <summary>
            Abstraction for publishing domain events without external dependencies
            </summary>
        </member>
        <member name="T:ShopFlow.Domain.Infrastructure.IDomainEventHandler`1">
            <summary>
            Abstraction for handling domain events without external dependencies
            </summary>
            <typeparam name="TDomainEvent">The type of domain event to handle</typeparam>
        </member>
        <member name="T:ShopFlow.Domain.ValueObjects.Barcode">
            <summary>
            Value object representing barcode with Vietnamese marketplace validation
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.ValueObjects.Barcode.Value">
            <summary>
            Gets the barcode value
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.ValueObjects.Barcode.Type">
            <summary>
            Gets the barcode type
            </summary>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.Barcode.Create(System.String,ShopFlow.Domain.ValueObjects.BarcodeType)">
            <summary>
            Creates barcode with validation for Vietnamese marketplace standards
            </summary>
            <param name="value">Barcode value</param>
            <param name="type">Barcode type (EAN13, UPC, etc.)</param>
            <returns>Barcode instance</returns>
            <exception cref="T:System.ArgumentException">When barcode is invalid</exception>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.Barcode.GenerateVietnameseEan13(System.String,System.Int32)">
            <summary>
            Generates automatic Vietnamese EAN13 barcode
            Country code 893 is assigned to Vietnam
            </summary>
            <param name="companyPrefix">Vietnamese company prefix (3-7 digits)</param>
            <param name="itemReference">Item reference number</param>
            <returns>Auto-generated Vietnamese EAN13 barcode</returns>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.Barcode.GenerateUpcA(System.String,System.Int32)">
            <summary>
            Generates automatic UPC-A barcode for Vietnamese marketplace
            </summary>
            <param name="manufacturerId">Vietnamese manufacturer ID (6 digits)</param>
            <param name="productId">Product ID (5 digits)</param>
            <returns>Auto-generated UPC-A barcode</returns>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.Barcode.Equals(ShopFlow.Domain.ValueObjects.Barcode)">
            <summary>
            Determines whether the specified Barcode is equal to the current Barcode
            </summary>
            <param name="other">The Barcode to compare with the current Barcode</param>
            <returns>true if the specified Barcode is equal to the current Barcode; otherwise, false</returns>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.Barcode.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current Barcode
            </summary>
            <param name="obj">The object to compare with the current Barcode</param>
            <returns>true if the specified object is equal to the current Barcode; otherwise, false</returns>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.Barcode.GetHashCode">
            <summary>
            Returns the hash code for this Barcode
            </summary>
            <returns>A hash code for the current Barcode</returns>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.Barcode.ToString">
            <summary>
            Returns the barcode value as a string
            </summary>
            <returns>The barcode value</returns>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.Barcode.op_Implicit(ShopFlow.Domain.ValueObjects.Barcode)~System.String">
            <summary>
            Implicitly converts a Barcode to a string
            </summary>
            <param name="barcode">The Barcode to convert</param>
            <returns>The barcode value as a string</returns>
            <exception cref="T:System.ArgumentNullException">When barcode is null</exception>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.Barcode.op_Equality(ShopFlow.Domain.ValueObjects.Barcode,ShopFlow.Domain.ValueObjects.Barcode)">
            <summary>
            Determines whether two Barcode instances are equal
            </summary>
            <param name="left">The first Barcode to compare</param>
            <param name="right">The second Barcode to compare</param>
            <returns>true if the Barcode instances are equal; otherwise, false</returns>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.Barcode.op_Inequality(ShopFlow.Domain.ValueObjects.Barcode,ShopFlow.Domain.ValueObjects.Barcode)">
            <summary>
            Determines whether two Barcode instances are not equal
            </summary>
            <param name="left">The first Barcode to compare</param>
            <param name="right">The second Barcode to compare</param>
            <returns>true if the Barcode instances are not equal; otherwise, false</returns>
        </member>
        <member name="T:ShopFlow.Domain.ValueObjects.BarcodeType">
            <summary>
            Supported barcode types for Vietnamese marketplace
            </summary>
        </member>
        <member name="F:ShopFlow.Domain.ValueObjects.BarcodeType.EAN13">
            <summary>
            EAN-13 barcode (most common in Vietnam)
            </summary>
        </member>
        <member name="F:ShopFlow.Domain.ValueObjects.BarcodeType.EAN8">
            <summary>
            EAN-8 compact barcode
            </summary>
        </member>
        <member name="F:ShopFlow.Domain.ValueObjects.BarcodeType.UPCA">
            <summary>
            Universal Product Code A
            </summary>
        </member>
        <member name="F:ShopFlow.Domain.ValueObjects.BarcodeType.UPCE">
            <summary>
            Universal Product Code E (compact)
            </summary>
        </member>
        <member name="F:ShopFlow.Domain.ValueObjects.BarcodeType.CODE128">
            <summary>
            Code 128 with alphanumeric support
            </summary>
        </member>
        <member name="F:ShopFlow.Domain.ValueObjects.BarcodeType.CODE39">
            <summary>
            Code 39 for legacy support
            </summary>
        </member>
        <member name="T:ShopFlow.Domain.ValueObjects.CategoryName">
            <summary>
            Value object representing a category name with validation
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.ValueObjects.CategoryName.Value">
            <summary>
            Gets the normalized category name value
            </summary>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.CategoryName.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CategoryName class
            </summary>
            <param name="value">The category name string to validate and normalize</param>
            <exception cref="T:System.ArgumentException">Thrown when category name is invalid</exception>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.CategoryName.op_Implicit(System.String)~ShopFlow.Domain.ValueObjects.CategoryName">
            <summary>
            Implicitly converts a string to CategoryName
            </summary>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.CategoryName.op_Implicit(ShopFlow.Domain.ValueObjects.CategoryName)~System.String">
            <summary>
            Implicitly converts CategoryName to string
            </summary>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.CategoryName.ToString">
            <summary>
            Returns the string representation of the category name
            </summary>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.CategoryName.Equals(ShopFlow.Domain.ValueObjects.CategoryName)">
            <summary>
            Determines whether two CategoryName instances are equal
            </summary>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.CategoryName.Equals(System.Object)">
            <summary>
            Determines whether two CategoryName instances are equal
            </summary>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.CategoryName.GetHashCode">
            <summary>
            Returns the hash code for this CategoryName
            </summary>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.CategoryName.op_Equality(ShopFlow.Domain.ValueObjects.CategoryName,ShopFlow.Domain.ValueObjects.CategoryName)">
            <summary>
            Determines whether two CategoryName instances are equal
            </summary>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.CategoryName.op_Inequality(ShopFlow.Domain.ValueObjects.CategoryName,ShopFlow.Domain.ValueObjects.CategoryName)">
            <summary>
            Determines whether two CategoryName instances are not equal
            </summary>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.CategoryName.FromDisplayName(System.String)">
            <summary>
            Creates a CategoryName from a display name by normalizing it
            </summary>
            <param name="displayName">The display name to normalize</param>
            <returns>A new CategoryName instance</returns>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.CategoryName.IsValid(System.String)">
            <summary>
            Validates if a string can be used as a category name
            </summary>
            <param name="value">The string to validate</param>
            <returns>True if valid, false otherwise</returns>
        </member>
        <member name="T:ShopFlow.Domain.ValueObjects.CategorySlug">
            <summary>
            Value object representing a category URL slug with validation
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.ValueObjects.CategorySlug.Value">
            <summary>
            Gets the normalized category slug value
            </summary>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.CategorySlug.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CategorySlug class
            </summary>
            <param name="value">The category slug string to validate and normalize</param>
            <exception cref="T:System.ArgumentException">Thrown when category slug is invalid</exception>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.CategorySlug.FromName(System.String)">
            <summary>
            Creates a CategorySlug from a name by converting it to a slug format
            </summary>
            <param name="name">The name to convert to slug</param>
            <returns>A new CategorySlug instance</returns>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.CategorySlug.FromCategoryName(ShopFlow.Domain.ValueObjects.CategoryName)">
            <summary>
            Creates a CategorySlug from a CategoryName
            </summary>
            <param name="categoryName">The category name to convert to slug</param>
            <returns>A new CategorySlug instance</returns>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.CategorySlug.ToString">
            <summary>
            Returns the string representation of the category slug
            </summary>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.CategorySlug.Equals(ShopFlow.Domain.ValueObjects.CategorySlug)">
            <summary>
            Determines whether two CategorySlug instances are equal
            </summary>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.CategorySlug.Equals(System.Object)">
            <summary>
            Determines whether two CategorySlug instances are equal
            </summary>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.CategorySlug.GetHashCode">
            <summary>
            Returns the hash code for this CategorySlug
            </summary>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.CategorySlug.op_Equality(ShopFlow.Domain.ValueObjects.CategorySlug,ShopFlow.Domain.ValueObjects.CategorySlug)">
            <summary>
            Determines whether two CategorySlug instances are equal
            </summary>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.CategorySlug.op_Inequality(ShopFlow.Domain.ValueObjects.CategorySlug,ShopFlow.Domain.ValueObjects.CategorySlug)">
            <summary>
            Determines whether two CategorySlug instances are not equal
            </summary>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.CategorySlug.IsValid(System.String)">
            <summary>
            Validates if a string can be used as a category slug
            </summary>
            <param name="value">The string to validate</param>
            <returns>True if valid, false otherwise</returns>
        </member>
        <member name="T:ShopFlow.Domain.ValueObjects.Dimensions">
            <summary>
            Value object representing product dimensions with Vietnamese marketplace validation
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.ValueObjects.Dimensions.LengthMm">
            <summary>
            Gets the length in millimeters
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.ValueObjects.Dimensions.WidthMm">
            <summary>
            Gets the width in millimeters
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.ValueObjects.Dimensions.HeightMm">
            <summary>
            Gets the height in millimeters
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.ValueObjects.Dimensions.VolumeMm3">
            <summary>
            Gets the calculated volume in cubic millimeters
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.ValueObjects.Dimensions.VolumeCm3">
            <summary>
            Gets the calculated volume in cubic centimeters
            </summary>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.Dimensions.Create(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates dimensions with validation for Vietnamese marketplace standards
            </summary>
            <param name="lengthMm">Length in millimeters</param>
            <param name="widthMm">Width in millimeters</param>
            <param name="heightMm">Height in millimeters</param>
            <returns>Dimensions instance</returns>
            <exception cref="T:System.ArgumentException">When dimensions are invalid</exception>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.Dimensions.FromCentimeters(System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            Creates dimensions from centimeters (common input format)
            </summary>
            <param name="lengthCm">Length in centimeters</param>
            <param name="widthCm">Width in centimeters</param>
            <param name="heightCm">Height in centimeters</param>
            <returns>Dimensions instance</returns>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.Dimensions.FromInches(System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            Creates dimensions from inches (for international compatibility)
            </summary>
            <param name="lengthIn">Length in inches</param>
            <param name="widthIn">Width in inches</param>
            <param name="heightIn">Height in inches</param>
            <returns>Dimensions instance</returns>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.Dimensions.GetLengthCm">
            <summary>
            Gets length in centimeters
            </summary>
            <returns>Length in centimeters</returns>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.Dimensions.GetWidthCm">
            <summary>
            Gets width in centimeters
            </summary>
            <returns>Width in centimeters</returns>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.Dimensions.GetHeightCm">
            <summary>
            Gets height in centimeters
            </summary>
            <returns>Height in centimeters</returns>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.Dimensions.IsWithinPostalLimits">
            <summary>
            Checks if dimensions exceed Vietnamese postal service limits
            Vietnam Post: max 60cm length, 120cm total L+W+H
            </summary>
            <returns>true if dimensions are within postal limits</returns>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.Dimensions.IsStandardShippingSize">
            <summary>
            Checks if dimensions are suitable for standard shipping boxes
            </summary>
            <returns>true if dimensions fit standard shipping sizes</returns>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.Dimensions.Equals(ShopFlow.Domain.ValueObjects.Dimensions)">
            <summary>
            Determines whether the specified Dimensions is equal to the current Dimensions
            </summary>
            <param name="other">The Dimensions to compare with the current Dimensions</param>
            <returns>true if the specified Dimensions is equal to the current Dimensions; otherwise, false</returns>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.Dimensions.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current Dimensions
            </summary>
            <param name="obj">The object to compare with the current Dimensions</param>
            <returns>true if the specified object is equal to the current Dimensions; otherwise, false</returns>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.Dimensions.GetHashCode">
            <summary>
            Returns the hash code for this Dimensions
            </summary>
            <returns>A hash code for the current Dimensions</returns>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.Dimensions.ToString">
            <summary>
            Returns the dimensions as a formatted string
            </summary>
            <returns>The dimensions formatted as "L×W×H cm"</returns>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.Dimensions.op_Equality(ShopFlow.Domain.ValueObjects.Dimensions,ShopFlow.Domain.ValueObjects.Dimensions)">
            <summary>
            Determines whether two Dimensions instances are equal
            </summary>
            <param name="left">The first Dimensions to compare</param>
            <param name="right">The second Dimensions to compare</param>
            <returns>true if the Dimensions instances are equal; otherwise, false</returns>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.Dimensions.op_Inequality(ShopFlow.Domain.ValueObjects.Dimensions,ShopFlow.Domain.ValueObjects.Dimensions)">
            <summary>
            Determines whether two Dimensions instances are not equal
            </summary>
            <param name="left">The first Dimensions to compare</param>
            <param name="right">The second Dimensions to compare</param>
            <returns>true if the Dimensions instances are not equal; otherwise, false</returns>
        </member>
        <member name="T:ShopFlow.Domain.ValueObjects.Email">
            <summary>
            Value object representing an email address with validation
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.ValueObjects.Email.Value">
            <summary>
            Gets the normalized email value
            </summary>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.Email.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Email class
            </summary>
            <param name="value">The email string to validate and normalize</param>
            <exception cref="T:System.ArgumentException">Thrown when email is invalid</exception>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.Email.IsValid(System.String)">
            <summary>
            Validates if a string is a valid email format
            </summary>
            <param name="email">Email string to validate</param>
            <returns>True if valid, false otherwise</returns>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.Email.FromString(System.String)">
            <summary>
            Creates an Email from a string value
            </summary>
            <param name="value">The email string</param>
            <returns>Email instance</returns>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.Email.op_Implicit(ShopFlow.Domain.ValueObjects.Email)~System.String">
            <summary>
            Converts Email to string implicitly
            </summary>
            <param name="email">Email instance</param>
            <returns>String representation</returns>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.Email.op_Explicit(System.String)~ShopFlow.Domain.ValueObjects.Email">
            <summary>
            Converts string to Email explicitly
            </summary>
            <param name="value">String value</param>
            <returns>Email instance</returns>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.Email.Equals(ShopFlow.Domain.ValueObjects.Email)">
            <summary>
            Determines whether this instance and another Email are equal
            </summary>
            <param name="other">Email to compare with</param>
            <returns>True if equal, false otherwise</returns>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.Email.Equals(System.Object)">
            <summary>
            Determines whether this instance and the specified object are equal
            </summary>
            <param name="obj">Object to compare with</param>
            <returns>True if equal, false otherwise</returns>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.Email.GetHashCode">
            <summary>
            Gets the hash code for this instance
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.Email.ToString">
            <summary>
            Returns the string representation of the email
            </summary>
            <returns>Email value as string</returns>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.Email.op_Equality(ShopFlow.Domain.ValueObjects.Email,ShopFlow.Domain.ValueObjects.Email)">
            <summary>
            Determines whether two Email instances are equal
            </summary>
            <param name="left">Left operand</param>
            <param name="right">Right operand</param>
            <returns>True if equal, false otherwise</returns>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.Email.op_Inequality(ShopFlow.Domain.ValueObjects.Email,ShopFlow.Domain.ValueObjects.Email)">
            <summary>
            Determines whether two Email instances are not equal
            </summary>
            <param name="left">Left operand</param>
            <param name="right">Right operand</param>
            <returns>True if not equal, false otherwise</returns>
        </member>
        <member name="T:ShopFlow.Domain.ValueObjects.OtpCode">
            <summary>
            Value object representing an OTP (One-Time Password) code
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.ValueObjects.OtpCode.Value">
            <summary>
            Gets the OTP code value
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.ValueObjects.OtpCode.GeneratedAt">
            <summary>
            Gets when the OTP was generated
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.ValueObjects.OtpCode.ExpiresAt">
            <summary>
            Gets when the OTP expires
            </summary>
        </member>
        <member name="F:ShopFlow.Domain.ValueObjects.OtpCode.DefaultExpirationMinutes">
            <summary>
            Gets the default OTP expiration time in minutes
            </summary>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.OtpCode.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the OtpCode class
            </summary>
            <param name="value">The OTP code value</param>
            <param name="expirationMinutes">The expiration time in minutes (default: 15)</param>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.OtpCode.Generate(System.Int32)">
            <summary>
            Generates a new random 6-digit OTP code
            </summary>
            <param name="expirationMinutes">The expiration time in minutes (default: 15)</param>
            <returns>A new OtpCode instance</returns>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.OtpCode.IsExpired">
            <summary>
            Checks if the OTP code is expired
            </summary>
            <returns>True if expired, false otherwise</returns>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.OtpCode.IsValid">
            <summary>
            Checks if the OTP code is valid (not expired)
            </summary>
            <returns>True if valid, false otherwise</returns>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.OtpCode.GetRemainingTime">
            <summary>
            Gets the remaining time until expiration
            </summary>
            <returns>TimeSpan representing remaining time, or TimeSpan.Zero if expired</returns>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.OtpCode.IsValidFormat(System.String)">
            <summary>
            Validates if a string is a valid OTP format
            </summary>
            <param name="otp">OTP string to validate</param>
            <returns>True if valid format, false otherwise</returns>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.OtpCode.GenerateRandomOtp">
            <summary>
            Generates a cryptographically secure random 6-digit OTP
            </summary>
            <returns>6-digit OTP string</returns>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.OtpCode.Equals(ShopFlow.Domain.ValueObjects.OtpCode)">
            <summary>
            Determines whether the specified object is equal to the current object
            </summary>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.OtpCode.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object
            </summary>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.OtpCode.GetHashCode">
            <summary>
            Returns the hash code for this instance
            </summary>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.OtpCode.ToString">
            <summary>
            Returns the string representation of the OTP code
            </summary>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.OtpCode.op_Implicit(ShopFlow.Domain.ValueObjects.OtpCode)~System.String">
            <summary>
            Implicit conversion from OtpCode to string
            </summary>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.OtpCode.op_Explicit(System.String)~ShopFlow.Domain.ValueObjects.OtpCode">
            <summary>
            Explicit conversion from string to OtpCode
            </summary>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.OtpCode.op_Equality(ShopFlow.Domain.ValueObjects.OtpCode,ShopFlow.Domain.ValueObjects.OtpCode)">
            <summary>
            Equality operator
            </summary>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.OtpCode.op_Inequality(ShopFlow.Domain.ValueObjects.OtpCode,ShopFlow.Domain.ValueObjects.OtpCode)">
            <summary>
            Inequality operator
            </summary>
        </member>
        <member name="T:ShopFlow.Domain.ValueObjects.PhoneNumber">
            <summary>
            Value object representing a Vietnamese phone number
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.ValueObjects.PhoneNumber.Value">
            <summary>
            Gets the normalized phone number value
            </summary>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.PhoneNumber.#ctor(System.String)">
            <summary>
            Initializes a new instance of the PhoneNumber class
            </summary>
            <param name="value">The phone number string to validate and normalize</param>
            <exception cref="T:System.ArgumentException">Thrown when phone number is invalid</exception>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.PhoneNumber.op_Implicit(ShopFlow.Domain.ValueObjects.PhoneNumber)~System.String">
            <summary>
            Implicitly converts PhoneNumber to string
            </summary>
            <param name="phone">The phone number to convert</param>
            <returns>The phone number string value</returns>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.PhoneNumber.op_Explicit(System.String)~ShopFlow.Domain.ValueObjects.PhoneNumber">
            <summary>
            Explicitly converts string to PhoneNumber
            </summary>
            <param name="value">The string value to convert</param>
            <returns>A new PhoneNumber instance</returns>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.PhoneNumber.FromString(System.String)">
            <summary>
            Converts string to PhoneNumber - alternative to explicit operator
            </summary>
            <param name="value">The string value to convert</param>
            <returns>A new PhoneNumber instance</returns>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.PhoneNumber.ToPhoneNumber">
            <summary>
            Converts PhoneNumber to string - alternative to implicit operator
            </summary>
            <returns>The phone number string value</returns>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.PhoneNumber.Equals(ShopFlow.Domain.ValueObjects.PhoneNumber)">
            <summary>
            Determines whether the specified PhoneNumber is equal to the current PhoneNumber
            </summary>
            <param name="other">The PhoneNumber to compare with the current PhoneNumber</param>
            <returns>true if the specified PhoneNumber is equal to the current PhoneNumber; otherwise, false</returns>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.PhoneNumber.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current PhoneNumber
            </summary>
            <param name="obj">The object to compare with the current PhoneNumber</param>
            <returns>true if the specified object is equal to the current PhoneNumber; otherwise, false</returns>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.PhoneNumber.GetHashCode">
            <summary>
            Serves as the hash function for PhoneNumber
            </summary>
            <returns>A hash code for the current PhoneNumber</returns>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.PhoneNumber.ToString">
            <summary>
            Returns a string representation of the phone number
            </summary>
            <returns>The phone number string value</returns>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.PhoneNumber.op_Equality(ShopFlow.Domain.ValueObjects.PhoneNumber,ShopFlow.Domain.ValueObjects.PhoneNumber)">
            <summary>
            Determines whether two PhoneNumber instances are equal
            </summary>
            <param name="left">The first PhoneNumber to compare</param>
            <param name="right">The second PhoneNumber to compare</param>
            <returns>true if the PhoneNumbers are equal; otherwise, false</returns>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.PhoneNumber.op_Inequality(ShopFlow.Domain.ValueObjects.PhoneNumber,ShopFlow.Domain.ValueObjects.PhoneNumber)">
            <summary>
            Determines whether two PhoneNumber instances are not equal
            </summary>
            <param name="left">The first PhoneNumber to compare</param>
            <param name="right">The second PhoneNumber to compare</param>
            <returns>true if the PhoneNumbers are not equal; otherwise, false</returns>
        </member>
        <member name="T:ShopFlow.Domain.ValueObjects.ProductDescription">
            <summary>
            Represents a product description value object with Vietnamese marketplace support
            Supports both Vietnamese and English content for multi-language marketplace
            </summary>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.ProductDescription.FromContent(System.String)">
            <summary>
            Creates a ProductDescription from content with marketplace validation
            Supports Vietnamese and English text for multi-language marketplace
            </summary>
            <param name="content">The product description content</param>
            <returns>A valid ProductDescription instance</returns>
            <exception cref="T:System.ArgumentException">When content is invalid</exception>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.ProductDescription.IsValidMarketplaceDescription(System.String)">
            <summary>
            Validates if description content is suitable for Vietnamese marketplace
            Allows Vietnamese characters, Latin characters, numbers, spaces, and common symbols
            </summary>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.ProductDescription.IsVietnameseCharacter(System.Char)">
            <summary>
            Checks if character is a Vietnamese character
            Covers Vietnamese Unicode ranges for accented characters
            </summary>
        </member>
        <member name="T:ShopFlow.Domain.ValueObjects.ProductName">
            <summary>
            Represents a product name value object with marketplace validation rules
            Supports Vietnamese marketplace requirements with both VN and EN languages
            </summary>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.ProductName.FromDisplayName(System.String)">
            <summary>
            Creates a ProductName from a display name with marketplace validation
            Supports Vietnamese and English characters for multi-language marketplace
            </summary>
            <param name="displayName">The product display name</param>
            <returns>A valid ProductName instance</returns>
            <exception cref="T:System.ArgumentException">When display name is invalid</exception>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.ProductName.IsValidMarketplaceName(System.String)">
            <summary>
            Validates if a name is suitable for Vietnamese marketplace
            Allows Vietnamese characters, Latin characters, numbers, spaces, and common symbols
            </summary>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.ProductName.IsVietnameseCharacter(System.Char)">
            <summary>
            Checks if character is a Vietnamese character
            Covers Vietnamese Unicode ranges for accented characters
            </summary>
        </member>
        <member name="T:ShopFlow.Domain.ValueObjects.ProductSlug">
            <summary>
            Represents a product slug value object for marketplace SEO-friendly URLs
            Supports Vietnamese marketplace with proper URL slug generation and validation
            </summary>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.ProductSlug.FromString(System.String)">
            <summary>
            Creates a ProductSlug from a string with marketplace validation
            Ensures SEO-friendly URLs for Vietnamese marketplace
            </summary>
            <param name="slug">The product slug string</param>
            <returns>A valid ProductSlug instance</returns>
            <exception cref="T:System.ArgumentException">When slug is invalid</exception>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.ProductSlug.FromProductName(ShopFlow.Domain.ValueObjects.ProductName)">
            <summary>
            Creates a ProductSlug from a ProductName by generating SEO-friendly slug
            Converts Vietnamese characters to URL-safe equivalents for marketplace SEO
            </summary>
            <param name="productName">The product name to convert</param>
            <returns>A SEO-friendly ProductSlug</returns>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.ProductSlug.GenerateSlugFromName(System.String)">
            <summary>
            Generates a SEO-friendly slug from product name
            Handles Vietnamese character conversion for marketplace URLs
            </summary>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.ProductSlug.RemoveVietnameseAccents(System.String)">
            <summary>
            Removes Vietnamese accents and converts to ASCII for SEO-friendly URLs
            Essential for Vietnamese marketplace SEO optimization
            </summary>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.ProductSlug.IsValidSlugFormat(System.String)">
            <summary>
            Validates slug format for marketplace URLs
            Ensures SEO-friendly format: lowercase, alphanumeric, hyphens only
            </summary>
        </member>
        <member name="T:ShopFlow.Domain.ValueObjects.SkuCode">
            <summary>
            Value object representing SKU code with Vietnamese marketplace validation
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.ValueObjects.SkuCode.Value">
            <summary>
            Gets the SKU code value
            </summary>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.SkuCode.Create(System.String)">
            <summary>
            Creates SKU code with validation for Vietnamese marketplace standards
            </summary>
            <param name="value">SKU code value</param>
            <returns>SkuCode instance</returns>
            <exception cref="T:System.ArgumentException">When SKU code is invalid</exception>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.SkuCode.GenerateAutomatic(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Int32)">
            <summary>
            Generates automatic SKU code based on product name and variant options
            </summary>
            <param name="productName">Product name in Vietnamese/English</param>
            <param name="variantOptions">Variant options (color, size, etc.)</param>
            <param name="sequence">Sequence number for uniqueness</param>
            <returns>Auto-generated SkuCode</returns>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.SkuCode.Equals(ShopFlow.Domain.ValueObjects.SkuCode)">
            <summary>
            Determines whether the specified SkuCode is equal to the current SkuCode
            </summary>
            <param name="other">The SkuCode to compare with the current SkuCode</param>
            <returns>true if the specified SkuCode is equal to the current SkuCode; otherwise, false</returns>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.SkuCode.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current SkuCode
            </summary>
            <param name="obj">The object to compare with the current SkuCode</param>
            <returns>true if the specified object is equal to the current SkuCode; otherwise, false</returns>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.SkuCode.GetHashCode">
            <summary>
            Returns the hash code for this SkuCode
            </summary>
            <returns>A hash code for the current SkuCode</returns>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.SkuCode.ToString">
            <summary>
            Returns the SKU code value as a string
            </summary>
            <returns>The SKU code value</returns>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.SkuCode.op_Implicit(ShopFlow.Domain.ValueObjects.SkuCode)~System.String">
            <summary>
            Implicitly converts a SkuCode to a string
            </summary>
            <param name="skuCode">The SkuCode to convert</param>
            <returns>The SKU code value as a string</returns>
            <exception cref="T:System.ArgumentNullException">When skuCode is null</exception>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.SkuCode.op_Equality(ShopFlow.Domain.ValueObjects.SkuCode,ShopFlow.Domain.ValueObjects.SkuCode)">
            <summary>
            Determines whether two SkuCode instances are equal
            </summary>
            <param name="left">The first SkuCode to compare</param>
            <param name="right">The second SkuCode to compare</param>
            <returns>true if the SkuCode instances are equal; otherwise, false</returns>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.SkuCode.op_Inequality(ShopFlow.Domain.ValueObjects.SkuCode,ShopFlow.Domain.ValueObjects.SkuCode)">
            <summary>
            Determines whether two SkuCode instances are not equal
            </summary>
            <param name="left">The first SkuCode to compare</param>
            <param name="right">The second SkuCode to compare</param>
            <returns>true if the SkuCode instances are not equal; otherwise, false</returns>
        </member>
        <member name="T:ShopFlow.Domain.ValueObjects.Weight">
            <summary>
            Value object representing product weight with Vietnamese marketplace validation
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.ValueObjects.Weight.Grams">
            <summary>
            Gets the weight in grams
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.ValueObjects.Weight.Kilograms">
            <summary>
            Gets the weight in kilograms
            </summary>
        </member>
        <member name="P:ShopFlow.Domain.ValueObjects.Weight.Pounds">
            <summary>
            Gets the weight in pounds (for international compatibility)
            </summary>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.Weight.Create(System.Int32)">
            <summary>
            Creates weight with validation for Vietnamese marketplace standards
            </summary>
            <param name="grams">Weight in grams</param>
            <returns>Weight instance</returns>
            <exception cref="T:System.ArgumentException">When weight is invalid</exception>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.Weight.FromKilograms(System.Decimal)">
            <summary>
            Creates weight from kilograms (common input format)
            </summary>
            <param name="kilograms">Weight in kilograms</param>
            <returns>Weight instance</returns>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.Weight.FromPounds(System.Decimal)">
            <summary>
            Creates weight from pounds (for international compatibility)
            </summary>
            <param name="pounds">Weight in pounds</param>
            <returns>Weight instance</returns>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.Weight.IsWithinPostalLimits">
            <summary>
            Checks if weight is within Vietnamese postal service limits
            Vietnam Post: max 30kg for standard delivery
            </summary>
            <returns>true if weight is within postal limits</returns>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.Weight.IsExpressShippingEligible">
            <summary>
            Checks if weight qualifies for express shipping
            Express shipping typically limited to lighter packages
            </summary>
            <returns>true if weight qualifies for express shipping</returns>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.Weight.GetShippingCategory">
            <summary>
            Gets the shipping category based on weight for Vietnamese logistics
            </summary>
            <returns>Shipping category</returns>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.Weight.GetShippingCostMultiplier">
            <summary>
            Calculates estimated shipping cost category for Vietnamese market
            </summary>
            <returns>Cost multiplier category</returns>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.Weight.Equals(ShopFlow.Domain.ValueObjects.Weight)">
            <summary>
            Determines whether the specified Weight is equal to the current Weight
            </summary>
            <param name="other">The Weight to compare with the current Weight</param>
            <returns>true if the specified Weight is equal to the current Weight; otherwise, false</returns>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.Weight.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current Weight
            </summary>
            <param name="obj">The object to compare with the current Weight</param>
            <returns>true if the specified object is equal to the current Weight; otherwise, false</returns>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.Weight.GetHashCode">
            <summary>
            Returns the hash code for this Weight
            </summary>
            <returns>A hash code for the current Weight</returns>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.Weight.ToString">
            <summary>
            Returns the weight as a formatted string
            </summary>
            <returns>The weight formatted based on magnitude</returns>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.Weight.op_Equality(ShopFlow.Domain.ValueObjects.Weight,ShopFlow.Domain.ValueObjects.Weight)">
            <summary>
            Determines whether two Weight instances are equal
            </summary>
            <param name="left">The first Weight to compare</param>
            <param name="right">The second Weight to compare</param>
            <returns>true if the Weight instances are equal; otherwise, false</returns>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.Weight.op_Inequality(ShopFlow.Domain.ValueObjects.Weight,ShopFlow.Domain.ValueObjects.Weight)">
            <summary>
            Determines whether two Weight instances are not equal
            </summary>
            <param name="left">The first Weight to compare</param>
            <param name="right">The second Weight to compare</param>
            <returns>true if the Weight instances are not equal; otherwise, false</returns>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.Weight.op_Addition(ShopFlow.Domain.ValueObjects.Weight,ShopFlow.Domain.ValueObjects.Weight)">
            <summary>
            Adds two weights together
            </summary>
            <param name="left">The first weight</param>
            <param name="right">The second weight</param>
            <returns>The sum of the two weights</returns>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.Weight.op_Subtraction(ShopFlow.Domain.ValueObjects.Weight,ShopFlow.Domain.ValueObjects.Weight)">
            <summary>
            Subtracts one weight from another
            </summary>
            <param name="left">The weight to subtract from</param>
            <param name="right">The weight to subtract</param>
            <returns>The difference between the two weights</returns>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.Weight.op_GreaterThan(ShopFlow.Domain.ValueObjects.Weight,ShopFlow.Domain.ValueObjects.Weight)">
            <summary>
            Compares two weights
            </summary>
            <param name="left">The first weight</param>
            <param name="right">The second weight</param>
            <returns>true if left is greater than right</returns>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.Weight.op_LessThan(ShopFlow.Domain.ValueObjects.Weight,ShopFlow.Domain.ValueObjects.Weight)">
            <summary>
            Compares two weights
            </summary>
            <param name="left">The first weight</param>
            <param name="right">The second weight</param>
            <returns>true if left is less than right</returns>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.Weight.op_GreaterThanOrEqual(ShopFlow.Domain.ValueObjects.Weight,ShopFlow.Domain.ValueObjects.Weight)">
            <summary>
            Compares two weights
            </summary>
            <param name="left">The first weight</param>
            <param name="right">The second weight</param>
            <returns>true if left is greater than or equal to right</returns>
        </member>
        <member name="M:ShopFlow.Domain.ValueObjects.Weight.op_LessThanOrEqual(ShopFlow.Domain.ValueObjects.Weight,ShopFlow.Domain.ValueObjects.Weight)">
            <summary>
            Compares two weights
            </summary>
            <param name="left">The first weight</param>
            <param name="right">The second weight</param>
            <returns>true if left is less than or equal to right</returns>
        </member>
        <member name="T:ShopFlow.Domain.ValueObjects.WeightCategory">
            <summary>
            Weight categories for shipping and logistics in Vietnamese marketplace
            </summary>
        </member>
        <member name="F:ShopFlow.Domain.ValueObjects.WeightCategory.Light">
            <summary>
            Light weight items (up to 500g) - letters, small accessories
            </summary>
        </member>
        <member name="F:ShopFlow.Domain.ValueObjects.WeightCategory.Medium">
            <summary>
            Medium weight items (500g - 2kg) - books, electronics, clothing
            </summary>
        </member>
        <member name="F:ShopFlow.Domain.ValueObjects.WeightCategory.Heavy">
            <summary>
            Heavy items (2kg - 10kg) - appliances, multiple items
            </summary>
        </member>
        <member name="F:ShopFlow.Domain.ValueObjects.WeightCategory.BulkStandard">
            <summary>
            Bulk standard items (10kg - 30kg) - furniture, large appliances
            </summary>
        </member>
        <member name="F:ShopFlow.Domain.ValueObjects.WeightCategory.BulkOversized">
            <summary>
            Oversized bulk items (over 30kg) - industrial equipment, vehicles
            </summary>
        </member>
    </members>
</doc>
