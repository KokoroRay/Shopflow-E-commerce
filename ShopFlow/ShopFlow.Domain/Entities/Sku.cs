using ShopFlow.Domain.ValueObjects;

namespace ShopFlow.Domain.Entities;

/// <summary>
/// Enhanced SKU entity with Vietnamese marketplace features and business logic
/// </summary>
public sealed class Sku : BaseEntity
{
    private readonly List<SkuMedia> _media = new();
    private readonly List<SkuOptionValue> _optionValues = new();

    /// <summary>
    /// Unique identifier for the SKU
    /// </summary>
    public new long Id { get; private set; }

    /// <summary>
    /// Product ID this SKU belongs to
    /// </summary>
    public long ProductId { get; private set; }

    /// <summary>
    /// SKU code with Vietnamese marketplace validation
    /// </summary>
    public SkuCode Code { get; private set; }

    /// <summary>
    /// Barcode with Vietnamese marketplace standards
    /// </summary>
    public Barcode? BarcodeValue { get; private set; }

    /// <summary>
    /// Product dimensions for shipping calculations
    /// </summary>
    public Dimensions? DimensionsValue { get; private set; }

    /// <summary>
    /// Product weight for shipping calculations
    /// </summary>
    public Weight? WeightValue { get; private set; }

    /// <summary>
    /// Whether the SKU is active and available
    /// </summary>
    public bool IsActive { get; private set; }

    /// <summary>
    /// Whether SKU code is auto-generated
    /// </summary>
    public bool IsAutoGenerated { get; private set; }

    /// <summary>
    /// Whether barcode is auto-generated
    /// </summary>
    public bool IsBarcodeAutoGenerated { get; private set; }

    /// <summary>
    /// Cost per unit for margin calculations
    /// </summary>
    public Money? CostPerUnit { get; private set; }

    /// <summary>
    /// When the SKU was created
    /// </summary>
    public DateTime CreatedAt { get; private set; }

    /// <summary>
    /// When the SKU was last updated
    /// </summary>
    public DateTime UpdatedAt { get; private set; }

    /// <summary>
    /// Who created the SKU
    /// </summary>
    public long? CreatedBy { get; private set; }

    /// <summary>
    /// Who last updated the SKU
    /// </summary>
    public long? UpdatedBy { get; private set; }

    /// <summary>
    /// Related product entity
    /// </summary>
    public CatProduct Product { get; private set; } = null!;

    /// <summary>
    /// SKU media (images, videos) - read-only collection
    /// </summary>
    public IReadOnlyList<SkuMedia> Media => _media.AsReadOnly();

    /// <summary>
    /// SKU option values (color, size, etc.) - read-only collection
    /// </summary>
    public IReadOnlyList<SkuOptionValue> OptionValues => _optionValues.AsReadOnly();

    // Private constructor for Entity Framework
    private Sku()
    {
        Code = null!; // Will be set by EF or factory methods
    }

    /// <summary>
    /// Creates a new SKU with auto-generated code
    /// </summary>
    /// <param name="productId">Product ID</param>
    /// <param name="productName">Product name for auto-generation</param>
    /// <param name="variantOptions">Variant options</param>
    /// <param name="sequence">Sequence number</param>
    /// <param name="createdBy">Creator user ID</param>
    /// <returns>New SKU instance</returns>
    public static Sku CreateWithAutoCode(
        long productId,
        string productName,
        Dictionary<string, string>? variantOptions = null,
        int sequence = 1,
        long? createdBy = null)
    {
        var sku = new Sku
        {
            ProductId = productId,
            Code = SkuCode.GenerateAutomatic(productName, variantOptions, sequence),
            IsActive = true,
            IsAutoGenerated = true,
            IsBarcodeAutoGenerated = false,
            CreatedAt = DateTime.UtcNow,
            UpdatedAt = DateTime.UtcNow,
            CreatedBy = createdBy,
            UpdatedBy = createdBy
        };

        return sku;
    }

    /// <summary>
    /// Creates a new SKU with manual code
    /// </summary>
    /// <param name="productId">Product ID</param>
    /// <param name="skuCode">Manual SKU code</param>
    /// <param name="createdBy">Creator user ID</param>
    /// <returns>New SKU instance</returns>
    public static Sku CreateWithManualCode(
        long productId,
        string skuCode,
        long? createdBy = null)
    {
        var sku = new Sku
        {
            ProductId = productId,
            Code = SkuCode.Create(skuCode),
            IsActive = true,
            IsAutoGenerated = false,
            IsBarcodeAutoGenerated = false,
            CreatedAt = DateTime.UtcNow,
            UpdatedAt = DateTime.UtcNow,
            CreatedBy = createdBy,
            UpdatedBy = createdBy
        };

        return sku;
    }

    /// <summary>
    /// Updates the SKU code (only allowed for manual codes)
    /// </summary>
    /// <param name="newCode">New SKU code</param>
    /// <param name="updatedBy">Updater user ID</param>
    /// <exception cref="InvalidOperationException">When trying to update auto-generated code</exception>
    public void UpdateCode(string newCode, long? updatedBy = null)
    {
        if (IsAutoGenerated)
            throw new InvalidOperationException("Cannot update auto-generated SKU code. Use regeneration instead.");

        Code = SkuCode.Create(newCode);
        UpdatedAt = DateTime.UtcNow;
        UpdatedBy = updatedBy;
    }

    /// <summary>
    /// Regenerates auto-generated SKU code
    /// </summary>
    /// <param name="productName">Product name</param>
    /// <param name="variantOptions">Variant options</param>
    /// <param name="sequence">New sequence number</param>
    /// <param name="updatedBy">Updater user ID</param>
    public void RegenerateCode(
        string productName,
        Dictionary<string, string>? variantOptions = null,
        int sequence = 1,
        long? updatedBy = null)
    {
        if (!IsAutoGenerated)
            throw new InvalidOperationException("Cannot regenerate manual SKU code. Use update instead.");

        Code = SkuCode.GenerateAutomatic(productName, variantOptions, sequence);
        UpdatedAt = DateTime.UtcNow;
        UpdatedBy = updatedBy;
    }

    /// <summary>
    /// Sets barcode with validation
    /// </summary>
    /// <param name="barcode">Barcode value</param>
    /// <param name="barcodeType">Barcode type</param>
    /// <param name="updatedBy">Updater user ID</param>
    public void SetBarcode(string barcode, BarcodeType barcodeType = BarcodeType.EAN13, long? updatedBy = null)
    {
        BarcodeValue = Barcode.Create(barcode, barcodeType);
        IsBarcodeAutoGenerated = false;
        UpdatedAt = DateTime.UtcNow;
        UpdatedBy = updatedBy;
    }

    /// <summary>
    /// Generates Vietnamese EAN13 barcode automatically
    /// </summary>
    /// <param name="companyPrefix">Vietnamese company prefix</param>
    /// <param name="itemReference">Item reference number</param>
    /// <param name="updatedBy">Updater user ID</param>
    public void GenerateVietnameseBarcode(string companyPrefix, int itemReference, long? updatedBy = null)
    {
        BarcodeValue = Barcode.GenerateVietnameseEan13(companyPrefix, itemReference);
        IsBarcodeAutoGenerated = true;
        UpdatedAt = DateTime.UtcNow;
        UpdatedBy = updatedBy;
    }

    /// <summary>
    /// Removes barcode
    /// </summary>
    /// <param name="updatedBy">Updater user ID</param>
    public void RemoveBarcode(long? updatedBy = null)
    {
        BarcodeValue = null;
        IsBarcodeAutoGenerated = false;
        UpdatedAt = DateTime.UtcNow;
        UpdatedBy = updatedBy;
    }

    /// <summary>
    /// Sets product dimensions
    /// </summary>
    /// <param name="lengthMm">Length in millimeters</param>
    /// <param name="widthMm">Width in millimeters</param>
    /// <param name="heightMm">Height in millimeters</param>
    /// <param name="updatedBy">Updater user ID</param>
    public void SetDimensions(int lengthMm, int widthMm, int heightMm, long? updatedBy = null)
    {
        DimensionsValue = Dimensions.Create(lengthMm, widthMm, heightMm);
        UpdatedAt = DateTime.UtcNow;
        UpdatedBy = updatedBy;
    }

    /// <summary>
    /// Sets product dimensions from centimeters
    /// </summary>
    /// <param name="lengthCm">Length in centimeters</param>
    /// <param name="widthCm">Width in centimeters</param>
    /// <param name="heightCm">Height in centimeters</param>
    /// <param name="updatedBy">Updater user ID</param>
    public void SetDimensionsFromCm(decimal lengthCm, decimal widthCm, decimal heightCm, long? updatedBy = null)
    {
        DimensionsValue = Dimensions.FromCentimeters(lengthCm, widthCm, heightCm);
        UpdatedAt = DateTime.UtcNow;
        UpdatedBy = updatedBy;
    }

    /// <summary>
    /// Removes dimensions
    /// </summary>
    /// <param name="updatedBy">Updater user ID</param>
    public void RemoveDimensions(long? updatedBy = null)
    {
        DimensionsValue = null;
        UpdatedAt = DateTime.UtcNow;
        UpdatedBy = updatedBy;
    }

    /// <summary>
    /// Sets product weight
    /// </summary>
    /// <param name="grams">Weight in grams</param>
    /// <param name="updatedBy">Updater user ID</param>
    public void SetWeight(int grams, long? updatedBy = null)
    {
        WeightValue = Weight.Create(grams);
        UpdatedAt = DateTime.UtcNow;
        UpdatedBy = updatedBy;
    }

    /// <summary>
    /// Sets product weight from kilograms
    /// </summary>
    /// <param name="kilograms">Weight in kilograms</param>
    /// <param name="updatedBy">Updater user ID</param>
    public void SetWeightFromKg(decimal kilograms, long? updatedBy = null)
    {
        WeightValue = Weight.FromKilograms(kilograms);
        UpdatedAt = DateTime.UtcNow;
        UpdatedBy = updatedBy;
    }

    /// <summary>
    /// Removes weight
    /// </summary>
    /// <param name="updatedBy">Updater user ID</param>
    public void RemoveWeight(long? updatedBy = null)
    {
        WeightValue = null;
        UpdatedAt = DateTime.UtcNow;
        UpdatedBy = updatedBy;
    }

    /// <summary>
    /// Sets cost per unit
    /// </summary>
    /// <param name="amount">Cost amount</param>
    /// <param name="currency">Currency code</param>
    /// <param name="updatedBy">Updater user ID</param>
    public void SetCost(decimal amount, string currency, long? updatedBy = null)
    {
        CostPerUnit = new Money(amount, currency);
        UpdatedAt = DateTime.UtcNow;
        UpdatedBy = updatedBy;
    }

    /// <summary>
    /// Activates the SKU
    /// </summary>
    /// <param name="updatedBy">Updater user ID</param>
    public void Activate(long? updatedBy = null)
    {
        IsActive = true;
        UpdatedAt = DateTime.UtcNow;
        UpdatedBy = updatedBy;
    }

    /// <summary>
    /// Deactivates the SKU
    /// </summary>
    /// <param name="updatedBy">Updater user ID</param>
    public void Deactivate(long? updatedBy = null)
    {
        IsActive = false;
        UpdatedAt = DateTime.UtcNow;
        UpdatedBy = updatedBy;
    }

    /// <summary>
    /// Checks if SKU is suitable for shipping within Vietnam
    /// </summary>
    /// <returns>true if suitable for shipping</returns>
    public bool IsShippingEligible()
    {
        // Check weight limits
        if (WeightValue != null && !WeightValue.IsWithinPostalLimits())
            return false;

        // Check dimension limits
        if (DimensionsValue != null && !DimensionsValue.IsWithinPostalLimits())
            return false;

        return IsActive;
    }

    /// <summary>
    /// Gets estimated shipping cost category
    /// </summary>
    /// <returns>Shipping cost multiplier</returns>
    public decimal GetShippingCostMultiplier()
    {
        if (WeightValue == null)
            return 1.0m; // Default for unknown weight

        return WeightValue.GetShippingCostMultiplier();
    }

    /// <summary>
    /// Adds media to the SKU
    /// </summary>
    /// <param name="media">SKU media</param>
    public void AddMedia(SkuMedia media)
    {
        ArgumentNullException.ThrowIfNull(media);
        _media.Add(media);
        UpdatedAt = DateTime.UtcNow;
    }

    /// <summary>
    /// Removes media from the SKU
    /// </summary>
    /// <param name="mediaId">Media ID to remove</param>
    public void RemoveMedia(long mediaId)
    {
        var media = _media.Find(m => m.Id == mediaId);
        if (media != null)
        {
            _media.Remove(media);
            UpdatedAt = DateTime.UtcNow;
        }
    }

    /// <summary>
    /// Adds option value to the SKU
    /// </summary>
    /// <param name="optionValue">SKU option value</param>
    public void AddOptionValue(SkuOptionValue optionValue)
    {
        ArgumentNullException.ThrowIfNull(optionValue);
        _optionValues.Add(optionValue);
        UpdatedAt = DateTime.UtcNow;
    }

    /// <summary>
    /// Removes option value from the SKU
    /// </summary>
    /// <param name="attributeId">Attribute ID</param>
    /// <param name="optionId">Option ID</param>
    public void RemoveOptionValue(long attributeId, long optionId)
    {
        var optionValue = _optionValues.Find(ov =>
            ov.AttributeId == attributeId && ov.OptionId == optionId);

        if (optionValue != null)
        {
            _optionValues.Remove(optionValue);
            UpdatedAt = DateTime.UtcNow;
        }
    }

    /// <summary>
    /// Gets display name combining product name and variant options
    /// </summary>
    /// <returns>Display name for the SKU</returns>
    public string GetDisplayName()
    {
        if (Product == null || !OptionValues.Any())
            return Code.Value;

        var variantText = string.Join(", ", OptionValues
            .Select(ov => $"{ov.Attribute?.Code}: {ov.Option?.Code}")
            .Where(text => !string.IsNullOrEmpty(text)));

        return string.IsNullOrEmpty(variantText)
            ? Code.Value
            : $"{Code.Value} ({variantText})";
    }

    /// <summary>
    /// Validates SKU completeness for Vietnamese marketplace
    /// </summary>
    /// <returns>Collection of validation errors</returns>
    public IReadOnlyCollection<string> ValidateCompleteness()
    {
        var errors = new List<string>();

        if (string.IsNullOrEmpty(Code.Value))
            errors.Add("SKU code is required");

        if (WeightValue == null)
            errors.Add("Weight is required for shipping calculations");

        if (DimensionsValue == null)
            errors.Add("Dimensions are required for shipping calculations");

        if (BarcodeValue == null)
            errors.Add("Barcode is recommended for Vietnamese marketplace");

        return errors.AsReadOnly();
    }
}

/// <summary>
/// SKU media entity placeholder (to be implemented)
/// </summary>
public class SkuMedia
{
    /// <summary>
    /// Media ID
    /// </summary>
    public long Id { get; set; }

    /// <summary>
    /// SKU ID this media belongs to
    /// </summary>
    public long SkuId { get; set; }

    /// <summary>
    /// Type of media (image, video, etc.)
    /// </summary>
    public string MediaType { get; set; } = null!;

    /// <summary>
    /// Media URL
    /// </summary>
    public Uri Url { get; set; } = null!;

    /// <summary>
    /// Display order for sorting
    /// </summary>
    public int DisplayOrder { get; set; }

    /// <summary>
    /// Whether this is the default media
    /// </summary>
    public bool IsDefault { get; set; }
}

/// <summary>
/// SKU option value entity placeholder (to be implemented)
/// </summary>
public class SkuOptionValue
{
    /// <summary>
    /// SKU ID
    /// </summary>
    public long SkuId { get; set; }

    /// <summary>
    /// Attribute ID
    /// </summary>
    public long AttributeId { get; set; }

    /// <summary>
    /// Option ID
    /// </summary>
    public long OptionId { get; set; }

    /// <summary>
    /// Related attribute entity
    /// </summary>
    public CatAttribute? Attribute { get; set; }

    /// <summary>
    /// Related option entity
    /// </summary>
    public CatAttributeOption? Option { get; set; }
}