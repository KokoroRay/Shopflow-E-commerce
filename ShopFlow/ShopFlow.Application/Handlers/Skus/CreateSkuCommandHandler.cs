using MediatR;
using Microsoft.Extensions.Logging;
using ShopFlow.Application.Abstractions.Repositories;
using ShopFlow.Application.Commands.Skus;
using ShopFlow.Application.Contracts.Response;
using ShopFlow.Application.DTOs;
using ShopFlow.Application.Exceptions;
using ShopFlow.Domain.Entities;
using ShopFlow.Domain.Exceptions;
using ShopFlow.Domain.ValueObjects;
using System.Globalization;

namespace ShopFlow.Application.Handlers.Skus;

/// <summary>
/// Handler for creating new SKUs with Vietnamese marketplace validation
/// </summary>
public class CreateSkuCommandHandler : IRequestHandler<CreateSkuCommand, CreateSkuResponse>
{
    private readonly ISkuRepository _skuRepository;
    private readonly IProductRepository _productRepository;
    private readonly ILogger<CreateSkuCommandHandler> _logger;

    public CreateSkuCommandHandler(
        ISkuRepository skuRepository,
        IProductRepository productRepository,
        ILogger<CreateSkuCommandHandler> logger)
    {
        _skuRepository = skuRepository;
        _productRepository = productRepository;
        _logger = logger;
    }

    public async Task<CreateSkuResponse> Handle(CreateSkuCommand request, CancellationToken cancellationToken)
    {
        ArgumentNullException.ThrowIfNull(request);

        _logger.LogInformation("Creating new SKU for product {ProductId}", request.ProductId);

        // Validate product exists
        var product = await _productRepository.GetByIdAsync(request.ProductId, cancellationToken: cancellationToken)
            .ConfigureAwait(false);
        if (product == null)
        {
            throw new NotFoundException($"Không tìm thấy sản phẩm với ID {request.ProductId}");
        }

        try
        {
            // Create SKU using appropriate factory method
            Sku sku;
            bool isCodeAutoGenerated;

            if (!string.IsNullOrEmpty(request.Code))
            {
                // Validate code uniqueness
                var codeExists = await _skuRepository.CodeExistsAsync(request.Code, cancellationToken: cancellationToken)
                    .ConfigureAwait(false);
                if (codeExists)
                {
                    throw new ValidationException($"Mã SKU '{request.Code}' đã tồn tại. Vui lòng chọn mã khác.");
                }

                sku = Sku.CreateWithManualCode(request.ProductId, request.Code);
                isCodeAutoGenerated = false;
            }
            else
            {
                // Auto-generate SKU code
                var sequenceNumber = await _skuRepository.GetNextSequenceNumberAsync(request.ProductId, cancellationToken)
                    .ConfigureAwait(false);
                var variantOptions = GenerateVariantOptions(request.OptionValues);

                sku = Sku.CreateWithAutoCode(
                    request.ProductId,
                    product.Name.Value, // Assuming Product has Name property
                    variantOptions,
                    sequenceNumber);
                isCodeAutoGenerated = true;
            }

            // Set barcode
            bool isBarcodeAutoGenerated = false;
            if (!string.IsNullOrEmpty(request.Barcode))
            {
                // Validate barcode uniqueness
                var barcodeExists = await _skuRepository.BarcodeExistsAsync(request.Barcode, cancellationToken: cancellationToken)
                    .ConfigureAwait(false);
                if (barcodeExists)
                {
                    throw new ValidationException($"Mã vạch '{request.Barcode}' đã tồn tại. Vui lòng chọn mã khác.");
                }

                var barcodeType = ParseBarcodeType(request.BarcodeType);
                sku.SetBarcode(request.Barcode, barcodeType);
            }
            else
            {
                // Auto-generate Vietnamese EAN13 barcode
                var companyPrefix = "893"; // Vietnamese country code
                var itemReference = (int)(DateTime.UtcNow.Ticks % 100000); // Simple item reference
                sku.GenerateVietnameseBarcode(companyPrefix, itemReference);
                isBarcodeAutoGenerated = true;
            }

            // Set dimensions (convert from decimal to int)
            var lengthMm = (int)Math.Round(request.LengthMm);
            var widthMm = (int)Math.Round(request.WidthMm);
            var heightMm = (int)Math.Round(request.HeightMm);
            sku.SetDimensions(lengthMm, widthMm, heightMm);

            // Set weight (convert from decimal to int)
            var weightGrams = (int)Math.Round(request.WeightGrams);
            sku.SetWeight(weightGrams);

            // Set pricing
            if (request.CostPrice > 0)
            {
                sku.SetCost(request.CostPrice, "VND");
            }

            // Set option values
            foreach (var optionValue in request.OptionValues)
            {
                var skuOptionValue = new SkuOptionValue
                {
                    SkuId = 0, // Will be set after creation
                    AttributeId = optionValue.AttributeId,
                    OptionId = optionValue.OptionId
                };
                sku.AddOptionValue(skuOptionValue);
            }

            // Save to database
            var createdSku = await _skuRepository.CreateAsync(sku, cancellationToken)
                .ConfigureAwait(false);

            _logger.LogInformation("Successfully created SKU {SkuCode} with ID {SkuId}",
                createdSku.Code.Value, createdSku.Id);

            // Map to response
            var response = new CreateSkuResponse
            {
                Sku = MapToDto(createdSku),
                Message = $"SKU '{createdSku.Code.Value}' đã được tạo thành công",
                IsCodeAutoGenerated = isCodeAutoGenerated,
                IsBarcodeAutoGenerated = isBarcodeAutoGenerated
            };

            return response;
        }
        catch (Domain.Exceptions.DomainException ex)
        {
            _logger.LogWarning("Domain validation failed when creating SKU: {Message}", ex.Message);
            throw new ValidationException($"Lỗi validation: {ex.Message}");
        }
        catch (ValidationException)
        {
            throw; // Re-throw validation exceptions
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error creating SKU for product {ProductId}", request.ProductId);
            throw new InvalidOperationException("Có lỗi xảy ra khi tạo SKU. Vui lòng thử lại.");
        }
    }

    /// <summary>
    /// Generates variant options dictionary from command option values
    /// </summary>
    private static Dictionary<string, string> GenerateVariantOptions(ICollection<CreateSkuOptionValueCommand> optionValues)
    {
        var options = new Dictionary<string, string>();

        foreach (var optionValue in optionValues)
        {
            // For now, use IDs as keys and values
            // In a real implementation, you'd fetch attribute and option names
            options[$"attr_{optionValue.AttributeId}"] = $"opt_{optionValue.OptionId}";
        }

        return options;
    }

    /// <summary>
    /// Parses barcode type string to enum
    /// </summary>
    private static BarcodeType ParseBarcodeType(string? barcodeType)
    {
        if (string.IsNullOrEmpty(barcodeType))
            return BarcodeType.EAN13;

        return barcodeType.ToUpperInvariant() switch
        {
            "EAN13" => BarcodeType.EAN13,
            "EAN8" => BarcodeType.EAN8,
            "UPC-A" => BarcodeType.UPCA,
            "UPC-E" => BarcodeType.UPCE,
            "CODE128" => BarcodeType.CODE128,
            "CODE39" => BarcodeType.CODE39,
            _ => BarcodeType.EAN13
        };
    }

    /// <summary>
    /// Maps SKU entity to DTO
    /// </summary>
    private static SkuDto MapToDto(Sku sku)
    {
        return new SkuDto
        {
            Id = sku.Id,
            Code = sku.Code.Value,
            Barcode = sku.BarcodeValue?.Value ?? string.Empty,
            BarcodeType = sku.BarcodeValue?.Type.ToString() ?? string.Empty,
            Name = $"SKU {sku.Code.Value}", // Generate name from code
            Description = $"SKU variant for product {sku.ProductId}",
            Price = 0, // SKU doesn't have price, it's on Product level
            CompareAtPrice = 0,
            CostPrice = sku.CostPerUnit?.Amount ?? 0,
            IsActive = sku.IsActive,
            ProductId = sku.ProductId,
            Dimensions = new DimensionsDto
            {
                LengthMm = sku.DimensionsValue?.LengthMm ?? 0,
                WidthMm = sku.DimensionsValue?.WidthMm ?? 0,
                HeightMm = sku.DimensionsValue?.HeightMm ?? 0
            },
            Weight = new WeightDto
            {
                Grams = sku.WeightValue?.Grams ?? 0
            },
            CreatedAt = sku.CreatedAt,
            UpdatedAt = sku.UpdatedAt,
            Media = sku.Media.Select(m => new SkuMediaDto
            {
                Id = m.Id,
                SkuId = m.SkuId,
                MediaType = m.MediaType,
                Url = m.Url.ToString(),
                DisplayOrder = m.DisplayOrder,
                IsDefault = m.IsDefault
            }).ToList(),
            OptionValues = sku.OptionValues.Select(ov => new SkuOptionValueDto
            {
                SkuId = ov.SkuId,
                AttributeId = ov.AttributeId,
                OptionId = ov.OptionId,
                AttributeName = ov.Attribute?.Code ?? string.Empty,
                OptionValue = ov.Option?.Code ?? string.Empty
            }).ToList()
        };
    }
}