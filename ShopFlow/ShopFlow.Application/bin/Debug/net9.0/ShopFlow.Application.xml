<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ShopFlow.Application</name>
    </assembly>
    <members>
        <member name="T:ShopFlow.Application.Abstractions.Mappings.ICategoryMapper">
            <summary>
            Mapper interface for converting Category entities to response DTOs
            </summary>
        </member>
        <member name="M:ShopFlow.Application.Abstractions.Mappings.ICategoryMapper.ToCategoryResponse(ShopFlow.Domain.Entities.CatCategory)">
            <summary>
            Converts a Category entity to CategoryResponse
            </summary>
            <param name="category">The category entity to convert</param>
            <returns>CategoryResponse DTO</returns>
        </member>
        <member name="M:ShopFlow.Application.Abstractions.Mappings.ICategoryMapper.ToCategoryResponseList(System.Collections.Generic.IEnumerable{ShopFlow.Domain.Entities.CatCategory})">
            <summary>
            Converts a collection of Category entities to CategoryResponse list
            </summary>
            <param name="categories">The category entities to convert</param>
            <returns>List of CategoryResponse DTOs</returns>
        </member>
        <member name="T:ShopFlow.Application.Abstractions.Repositories.ICategoryRepository">
            <summary>
            Repository interface for category operations
            </summary>
        </member>
        <member name="M:ShopFlow.Application.Abstractions.Repositories.ICategoryRepository.GetByIdAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Gets a category by its unique identifier
            </summary>
            <param name="id">The category identifier</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>The category if found, otherwise null</returns>
        </member>
        <member name="M:ShopFlow.Application.Abstractions.Repositories.ICategoryRepository.GetBySlugAsync(ShopFlow.Domain.ValueObjects.CategorySlug,System.Threading.CancellationToken)">
            <summary>
            Gets a category by its slug
            </summary>
            <param name="slug">The category slug</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>The category if found, otherwise null</returns>
        </member>
        <member name="M:ShopFlow.Application.Abstractions.Repositories.ICategoryRepository.GetByNameAsync(ShopFlow.Domain.ValueObjects.CategoryName,System.Threading.CancellationToken)">
            <summary>
            Gets a category by its name
            </summary>
            <param name="name">The category name</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>The category if found, otherwise null</returns>
        </member>
        <member name="M:ShopFlow.Application.Abstractions.Repositories.ICategoryRepository.GetChildrenAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Gets all child categories of a parent category
            </summary>
            <param name="parentId">The parent category identifier</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Collection of child categories</returns>
        </member>
        <member name="M:ShopFlow.Application.Abstractions.Repositories.ICategoryRepository.GetRootCategoriesAsync(System.Threading.CancellationToken)">
            <summary>
            Gets all root categories (categories without parent)
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Collection of root categories</returns>
        </member>
        <member name="M:ShopFlow.Application.Abstractions.Repositories.ICategoryRepository.GetCategoryHierarchyAsync(System.Threading.CancellationToken)">
            <summary>
            Gets categories with full hierarchy (parent and children)
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Collection of categories with hierarchy</returns>
        </member>
        <member name="M:ShopFlow.Application.Abstractions.Repositories.ICategoryRepository.FindAsync(ShopFlow.Application.Abstractions.Repositories.ISpecification{ShopFlow.Domain.Entities.CatCategory},System.Threading.CancellationToken)">
            <summary>
            Finds categories based on specification
            </summary>
            <param name="specification">The specification to apply</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Collection of categories matching the specification</returns>
        </member>
        <member name="M:ShopFlow.Application.Abstractions.Repositories.ICategoryRepository.ExistsBySlugAsync(ShopFlow.Domain.ValueObjects.CategorySlug,System.Threading.CancellationToken)">
            <summary>
            Checks if a category with the specified slug exists
            </summary>
            <param name="slug">The category slug</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if exists, otherwise false</returns>
        </member>
        <member name="M:ShopFlow.Application.Abstractions.Repositories.ICategoryRepository.ExistsByNameAsync(ShopFlow.Domain.ValueObjects.CategoryName,System.Threading.CancellationToken)">
            <summary>
            Checks if a category with the specified name exists
            </summary>
            <param name="name">The category name</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if exists, otherwise false</returns>
        </member>
        <member name="M:ShopFlow.Application.Abstractions.Repositories.ICategoryRepository.ExistsBySlugAsync(ShopFlow.Domain.ValueObjects.CategorySlug,System.Int64,System.Threading.CancellationToken)">
            <summary>
            Checks if a category with the specified slug exists, excluding a specific category
            </summary>
            <param name="slug">The category slug</param>
            <param name="excludeId">The category ID to exclude from the check</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if exists, otherwise false</returns>
        </member>
        <member name="M:ShopFlow.Application.Abstractions.Repositories.ICategoryRepository.ExistsByNameAsync(ShopFlow.Domain.ValueObjects.CategoryName,System.Int64,System.Threading.CancellationToken)">
            <summary>
            Checks if a category with the specified name exists, excluding a specific category
            </summary>
            <param name="name">The category name</param>
            <param name="excludeId">The category ID to exclude from the check</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if exists, otherwise false</returns>
        </member>
        <member name="M:ShopFlow.Application.Abstractions.Repositories.ICategoryRepository.AddAsync(ShopFlow.Domain.Entities.CatCategory,System.Threading.CancellationToken)">
            <summary>
            Adds a new category
            </summary>
            <param name="category">The category to add</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>The added category</returns>
        </member>
        <member name="M:ShopFlow.Application.Abstractions.Repositories.ICategoryRepository.UpdateAsync(ShopFlow.Domain.Entities.CatCategory,System.Threading.CancellationToken)">
            <summary>
            Updates an existing category
            </summary>
            <param name="category">The category to update</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task representing the asynchronous operation</returns>
        </member>
        <member name="M:ShopFlow.Application.Abstractions.Repositories.ICategoryRepository.DeleteAsync(ShopFlow.Domain.Entities.CatCategory,System.Threading.CancellationToken)">
            <summary>
            Deletes a category
            </summary>
            <param name="category">The category to delete</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task representing the asynchronous operation</returns>
        </member>
        <member name="T:ShopFlow.Application.Abstractions.Repositories.IPasswordResetTokenRepository">
            <summary>
            Repository interface for managing password reset tokens
            </summary>
        </member>
        <member name="M:ShopFlow.Application.Abstractions.Repositories.IPasswordResetTokenRepository.GetByIdAsync(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Gets a password reset token by its ID
            </summary>
            <param name="id">The token ID</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>The password reset token if found, null otherwise</returns>
        </member>
        <member name="M:ShopFlow.Application.Abstractions.Repositories.IPasswordResetTokenRepository.GetByEmailAsync(ShopFlow.Domain.ValueObjects.Email,System.Threading.CancellationToken)">
            <summary>
            Gets the latest active password reset token for an email
            </summary>
            <param name="email">The email address</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>The latest active token if found, null otherwise</returns>
        </member>
        <member name="M:ShopFlow.Application.Abstractions.Repositories.IPasswordResetTokenRepository.AddAsync(ShopFlow.Domain.Entities.PasswordResetToken,System.Threading.CancellationToken)">
            <summary>
            Adds a new password reset token
            </summary>
            <param name="token">The token to add</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>The added token</returns>
        </member>
        <member name="M:ShopFlow.Application.Abstractions.Repositories.IPasswordResetTokenRepository.UpdateAsync(ShopFlow.Domain.Entities.PasswordResetToken,System.Threading.CancellationToken)">
            <summary>
            Updates an existing password reset token
            </summary>
            <param name="token">The token to update</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>The updated token</returns>
        </member>
        <member name="M:ShopFlow.Application.Abstractions.Repositories.IPasswordResetTokenRepository.DeleteExpiredTokensAsync(System.Threading.CancellationToken)">
            <summary>
            Deletes expired tokens
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task representing the cleanup operation</returns>
        </member>
        <member name="T:ShopFlow.Application.Abstractions.Security.RequireRoleAttribute">
            <summary>
            Attribute to specify required roles for an action or controller
            </summary>
        </member>
        <member name="P:ShopFlow.Application.Abstractions.Security.RequireRoleAttribute.Roles">
            <summary>
            Required roles
            </summary>
        </member>
        <member name="P:ShopFlow.Application.Abstractions.Security.RequireRoleAttribute.RequireAllRoles">
            <summary>
            Indicates if all roles are required (true) or any role is sufficient (false)
            </summary>
        </member>
        <member name="M:ShopFlow.Application.Abstractions.Security.RequireRoleAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance with multiple roles
            </summary>
            <param name="roles">Required roles</param>
        </member>
        <member name="M:ShopFlow.Application.Abstractions.Security.RequireRoleAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance with a single role
            </summary>
            <param name="role">Required role</param>
        </member>
        <member name="T:ShopFlow.Application.Abstractions.Security.RequirePermissionAttribute">
            <summary>
            Attribute to specify required permissions for an action or controller
            </summary>
        </member>
        <member name="P:ShopFlow.Application.Abstractions.Security.RequirePermissionAttribute.Permissions">
            <summary>
            Required permissions
            </summary>
        </member>
        <member name="P:ShopFlow.Application.Abstractions.Security.RequirePermissionAttribute.RequireAllPermissions">
            <summary>
            Indicates if all permissions are required (true) or any permission is sufficient (false)
            </summary>
        </member>
        <member name="M:ShopFlow.Application.Abstractions.Security.RequirePermissionAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance with multiple permissions
            </summary>
            <param name="permissions">Required permissions</param>
        </member>
        <member name="M:ShopFlow.Application.Abstractions.Security.RequirePermissionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance with a single permission
            </summary>
            <param name="permission">Required permission</param>
        </member>
        <member name="T:ShopFlow.Application.Abstractions.Security.RoleAttributes">
            <summary>
            Predefined authorization attributes for common roles
            </summary>
        </member>
        <member name="T:ShopFlow.Application.Abstractions.Security.RoleAttributes.AdminOnlyAttribute">
            <summary>
            Require Admin role
            </summary>
        </member>
        <member name="T:ShopFlow.Application.Abstractions.Security.RoleAttributes.ModeratorOnlyAttribute">
            <summary>
            Require Moderator role
            </summary>
        </member>
        <member name="T:ShopFlow.Application.Abstractions.Security.RoleAttributes.CustomerOnlyAttribute">
            <summary>
            Require Customer role
            </summary>
        </member>
        <member name="T:ShopFlow.Application.Abstractions.Security.RoleAttributes.StaffOnlyAttribute">
            <summary>
            Require Staff roles (Admin, Moderator, Vendor Staff, Warehouse Staff)
            </summary>
        </member>
        <member name="T:ShopFlow.Application.Abstractions.Security.RoleAttributes.AdminOrModeratorAttribute">
            <summary>
            Require Admin or Moderator role
            </summary>
        </member>
        <member name="T:ShopFlow.Application.Abstractions.Security.RoleAttributes.VendorStaffOnlyAttribute">
            <summary>
            Require Vendor Staff role
            </summary>
        </member>
        <member name="T:ShopFlow.Application.Abstractions.Security.RoleAttributes.WarehouseStaffOnlyAttribute">
            <summary>
            Require Warehouse Staff role
            </summary>
        </member>
        <member name="T:ShopFlow.Application.Abstractions.Security.RoleRequirement">
            <summary>
            Authorization requirement for role-based access control
            </summary>
        </member>
        <member name="P:ShopFlow.Application.Abstractions.Security.RoleRequirement.RequiredRoles">
            <summary>
            Required roles for authorization
            </summary>
        </member>
        <member name="P:ShopFlow.Application.Abstractions.Security.RoleRequirement.RequireAllRoles">
            <summary>
            Indicates if the user must have ALL roles (true) or ANY role (false)
            </summary>
        </member>
        <member name="M:ShopFlow.Application.Abstractions.Security.RoleRequirement.#ctor(System.String[],System.Boolean)">
            <summary>
            Initializes a new instance of the RoleRequirement class
            </summary>
            <param name="requiredRoles">Required roles</param>
            <param name="requireAllRoles">Require all roles or any role</param>
        </member>
        <member name="M:ShopFlow.Application.Abstractions.Security.RoleRequirement.#ctor(System.String)">
            <summary>
            Initializes a new instance of the RoleRequirement class with a single role
            </summary>
            <param name="requiredRole">Required role</param>
        </member>
        <member name="T:ShopFlow.Application.Abstractions.Security.PermissionRequirement">
            <summary>
            Authorization requirement for permission-based access control
            </summary>
        </member>
        <member name="P:ShopFlow.Application.Abstractions.Security.PermissionRequirement.RequiredPermissions">
            <summary>
            Required permissions for authorization
            </summary>
        </member>
        <member name="P:ShopFlow.Application.Abstractions.Security.PermissionRequirement.RequireAllPermissions">
            <summary>
            Indicates if the user must have ALL permissions (true) or ANY permission (false)
            </summary>
        </member>
        <member name="M:ShopFlow.Application.Abstractions.Security.PermissionRequirement.#ctor(System.String[],System.Boolean)">
            <summary>
            Initializes a new instance of the PermissionRequirement class
            </summary>
            <param name="requiredPermissions">Required permissions</param>
            <param name="requireAllPermissions">Require all permissions or any permission</param>
        </member>
        <member name="M:ShopFlow.Application.Abstractions.Security.PermissionRequirement.#ctor(System.String)">
            <summary>
            Initializes a new instance of the PermissionRequirement class with a single permission
            </summary>
            <param name="requiredPermission">Required permission</param>
        </member>
        <member name="T:ShopFlow.Application.Abstractions.Services.IEmailService">
            <summary>
            Service interface for sending emails
            </summary>
        </member>
        <member name="M:ShopFlow.Application.Abstractions.Services.IEmailService.SendPasswordResetOtpAsync(System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Sends a password reset OTP email to the specified recipient
            </summary>
            <param name="toEmail">The recipient's email address</param>
            <param name="otpCode">The OTP code to include in the email</param>
            <param name="expirationMinutes">The expiration time in minutes</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>A task representing the async operation</returns>
        </member>
        <member name="M:ShopFlow.Application.Abstractions.Services.IEmailService.SendPasswordResetConfirmationAsync(System.String,System.DateTime,System.Threading.CancellationToken)">
            <summary>
            Sends a password reset confirmation email
            </summary>
            <param name="toEmail">The recipient's email address</param>
            <param name="resetDateTime">When the password was reset</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>A task representing the async operation</returns>
        </member>
        <member name="M:ShopFlow.Application.Abstractions.Services.IEmailService.SendEmailAsync(System.String,System.String,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Sends a generic email with subject and body
            </summary>
            <param name="toEmail">The recipient's email address</param>
            <param name="subject">The email subject</param>
            <param name="body">The email body</param>
            <param name="isHtml">Whether the body is HTML formatted</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>A task representing the async operation</returns>
        </member>
        <member name="T:ShopFlow.Application.Abstractions.Services.IOtpService">
            <summary>
            Service interface for OTP generation and validation
            </summary>
        </member>
        <member name="M:ShopFlow.Application.Abstractions.Services.IOtpService.GenerateOtp(System.Int32)">
            <summary>
            Generates a new OTP code with specified expiration
            </summary>
            <param name="expirationMinutes">The expiration time in minutes (default: 15)</param>
            <returns>A new OtpCode instance</returns>
        </member>
        <member name="M:ShopFlow.Application.Abstractions.Services.IOtpService.IsValidOtpFormat(System.String)">
            <summary>
            Validates if the provided OTP code matches the expected format
            </summary>
            <param name="otpCode">The OTP code to validate</param>
            <returns>True if valid format, false otherwise</returns>
        </member>
        <member name="M:ShopFlow.Application.Abstractions.Services.IOtpService.GenerateOtpString">
            <summary>
            Generates a secure random OTP code as string
            </summary>
            <returns>6-digit OTP string</returns>
        </member>
        <member name="M:ShopFlow.Application.Abstractions.Services.IOtpService.IsOtpValid(ShopFlow.Domain.ValueObjects.OtpCode)">
            <summary>
            Validates if the OTP code is not expired
            </summary>
            <param name="otpCode">The OTP code to check</param>
            <returns>True if not expired, false otherwise</returns>
        </member>
        <member name="T:ShopFlow.Application.Abstractions.Services.IPageRoutingService">
            <summary>
            Service for determining role-based page routing after login
            </summary>
        </member>
        <member name="M:ShopFlow.Application.Abstractions.Services.IPageRoutingService.GetDefaultPageForRole(System.String)">
            <summary>
            Gets the default page URL based on user's primary role
            </summary>
            <param name="primaryRole">Primary role code</param>
            <returns>Default page URL</returns>
        </member>
        <member name="M:ShopFlow.Application.Abstractions.Services.IPageRoutingService.GetAllowedPagesForRole(System.String)">
            <summary>
            Gets allowed pages for a specific role
            </summary>
            <param name="roleCode">Role code</param>
            <returns>List of allowed page URLs</returns>
        </member>
        <member name="M:ShopFlow.Application.Abstractions.Services.IPageRoutingService.CanRoleAccessPage(System.String,System.String)">
            <summary>
            Checks if a role can access a specific page
            </summary>
            <param name="roleCode">Role code</param>
            <param name="pageUrl">Page URL</param>
            <returns>True if role can access the page</returns>
        </member>
        <member name="M:ShopFlow.Application.Abstractions.Services.IPageRoutingService.GetDashboardConfig(System.String)">
            <summary>
            Gets the dashboard configuration for a role
            </summary>
            <param name="primaryRole">Primary role code</param>
            <returns>Dashboard configuration</returns>
        </member>
        <member name="T:ShopFlow.Application.Abstractions.Services.DashboardConfig">
            <summary>
            Dashboard configuration for different roles
            </summary>
        </member>
        <member name="P:ShopFlow.Application.Abstractions.Services.DashboardConfig.Title">
            <summary>
            Dashboard title
            </summary>
        </member>
        <member name="P:ShopFlow.Application.Abstractions.Services.DashboardConfig.WelcomeMessage">
            <summary>
            Welcome message
            </summary>
        </member>
        <member name="P:ShopFlow.Application.Abstractions.Services.DashboardConfig.MenuItems">
            <summary>
            Available menu items
            </summary>
        </member>
        <member name="P:ShopFlow.Application.Abstractions.Services.DashboardConfig.QuickActions">
            <summary>
            Quick action buttons
            </summary>
        </member>
        <member name="T:ShopFlow.Application.Abstractions.Services.MenuItem">
            <summary>
            Menu item configuration
            </summary>
        </member>
        <member name="P:ShopFlow.Application.Abstractions.Services.MenuItem.Name">
            <summary>
            Menu item name
            </summary>
        </member>
        <member name="P:ShopFlow.Application.Abstractions.Services.MenuItem.Url">
            <summary>
            Menu item URL
            </summary>
        </member>
        <member name="P:ShopFlow.Application.Abstractions.Services.MenuItem.Icon">
            <summary>
            Icon class
            </summary>
        </member>
        <member name="P:ShopFlow.Application.Abstractions.Services.MenuItem.RequiredPermissions">
            <summary>
            Required permissions to view this menu item
            </summary>
        </member>
        <member name="T:ShopFlow.Application.Abstractions.Services.QuickAction">
            <summary>
            Quick action configuration
            </summary>
        </member>
        <member name="P:ShopFlow.Application.Abstractions.Services.QuickAction.Name">
            <summary>
            Action name
            </summary>
        </member>
        <member name="P:ShopFlow.Application.Abstractions.Services.QuickAction.Url">
            <summary>
            Action URL
            </summary>
        </member>
        <member name="P:ShopFlow.Application.Abstractions.Services.QuickAction.Description">
            <summary>
            Action description
            </summary>
        </member>
        <member name="P:ShopFlow.Application.Abstractions.Services.QuickAction.Icon">
            <summary>
            Icon class
            </summary>
        </member>
        <member name="T:ShopFlow.Application.Abstractions.Services.IUserRoleService">
            <summary>
            Service for managing user roles and permissions
            </summary>
        </member>
        <member name="M:ShopFlow.Application.Abstractions.Services.IUserRoleService.GetUserRolesAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Gets user roles by user ID
            </summary>
            <param name="userId">User ID</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of role codes</returns>
        </member>
        <member name="M:ShopFlow.Application.Abstractions.Services.IUserRoleService.GetUserPermissionsAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Gets user permissions by user ID
            </summary>
            <param name="userId">User ID</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of permission codes</returns>
        </member>
        <member name="M:ShopFlow.Application.Abstractions.Services.IUserRoleService.HasRoleAsync(System.Int64,System.String,System.Threading.CancellationToken)">
            <summary>
            Checks if user has specific role
            </summary>
            <param name="userId">User ID</param>
            <param name="roleCode">Role code</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if user has role</returns>
        </member>
        <member name="M:ShopFlow.Application.Abstractions.Services.IUserRoleService.HasPermissionAsync(System.Int64,System.String,System.Threading.CancellationToken)">
            <summary>
            Checks if user has specific permission
            </summary>
            <param name="userId">User ID</param>
            <param name="permissionCode">Permission code</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if user has permission</returns>
        </member>
        <member name="M:ShopFlow.Application.Abstractions.Services.IUserRoleService.AssignRoleAsync(System.Int64,System.String,System.Threading.CancellationToken)">
            <summary>
            Assigns role to user
            </summary>
            <param name="userId">User ID</param>
            <param name="roleCode">Role code</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task</returns>
        </member>
        <member name="M:ShopFlow.Application.Abstractions.Services.IUserRoleService.RemoveRoleAsync(System.Int64,System.String,System.Threading.CancellationToken)">
            <summary>
            Removes role from user
            </summary>
            <param name="userId">User ID</param>
            <param name="roleCode">Role code</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task</returns>
        </member>
        <member name="M:ShopFlow.Application.Abstractions.Services.IUserRoleService.GetPrimaryRoleAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Gets user's primary role (for role-based page routing)
            </summary>
            <param name="userId">User ID</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Primary role code or null</returns>
        </member>
        <member name="T:ShopFlow.Application.Commands.Categories.ActivateCategoryCommand">
            <summary>
            Command for activating a category
            </summary>
            <param name="Id">The category ID to activate</param>
        </member>
        <member name="M:ShopFlow.Application.Commands.Categories.ActivateCategoryCommand.#ctor(System.Int64)">
            <summary>
            Command for activating a category
            </summary>
            <param name="Id">The category ID to activate</param>
        </member>
        <member name="P:ShopFlow.Application.Commands.Categories.ActivateCategoryCommand.Id">
            <summary>The category ID to activate</summary>
        </member>
        <member name="T:ShopFlow.Application.Commands.Categories.CreateCategoryCommand">
            <summary>
            Command for creating a new category
            </summary>
            <param name="Name">The category name</param>
            <param name="Slug">The category slug</param>
            <param name="Description">The category description</param>
            <param name="ParentId">The parent category ID (optional)</param>
            <param name="SortOrder">The sort order</param>
            <param name="ImageUrl">The category image URL (optional)</param>
            <param name="IconUrl">The category icon URL (optional)</param>
            <param name="IsActive">Whether the category is active</param>
        </member>
        <member name="M:ShopFlow.Application.Commands.Categories.CreateCategoryCommand.#ctor(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            Command for creating a new category
            </summary>
            <param name="Name">The category name</param>
            <param name="Slug">The category slug</param>
            <param name="Description">The category description</param>
            <param name="ParentId">The parent category ID (optional)</param>
            <param name="SortOrder">The sort order</param>
            <param name="ImageUrl">The category image URL (optional)</param>
            <param name="IconUrl">The category icon URL (optional)</param>
            <param name="IsActive">Whether the category is active</param>
        </member>
        <member name="P:ShopFlow.Application.Commands.Categories.CreateCategoryCommand.Name">
            <summary>The category name</summary>
        </member>
        <member name="P:ShopFlow.Application.Commands.Categories.CreateCategoryCommand.Slug">
            <summary>The category slug</summary>
        </member>
        <member name="P:ShopFlow.Application.Commands.Categories.CreateCategoryCommand.Description">
            <summary>The category description</summary>
        </member>
        <member name="P:ShopFlow.Application.Commands.Categories.CreateCategoryCommand.ParentId">
            <summary>The parent category ID (optional)</summary>
        </member>
        <member name="P:ShopFlow.Application.Commands.Categories.CreateCategoryCommand.SortOrder">
            <summary>The sort order</summary>
        </member>
        <member name="P:ShopFlow.Application.Commands.Categories.CreateCategoryCommand.ImageUrl">
            <summary>The category image URL (optional)</summary>
        </member>
        <member name="P:ShopFlow.Application.Commands.Categories.CreateCategoryCommand.IconUrl">
            <summary>The category icon URL (optional)</summary>
        </member>
        <member name="P:ShopFlow.Application.Commands.Categories.CreateCategoryCommand.IsActive">
            <summary>Whether the category is active</summary>
        </member>
        <member name="T:ShopFlow.Application.Commands.Categories.DeactivateCategoryCommand">
            <summary>
            Command for deactivating a category
            </summary>
            <param name="Id">The category ID to deactivate</param>
        </member>
        <member name="M:ShopFlow.Application.Commands.Categories.DeactivateCategoryCommand.#ctor(System.Int64)">
            <summary>
            Command for deactivating a category
            </summary>
            <param name="Id">The category ID to deactivate</param>
        </member>
        <member name="P:ShopFlow.Application.Commands.Categories.DeactivateCategoryCommand.Id">
            <summary>The category ID to deactivate</summary>
        </member>
        <member name="T:ShopFlow.Application.Commands.Categories.DeleteCategoryCommand">
            <summary>
            Command for deleting a category
            </summary>
            <param name="Id">The category ID to delete</param>
        </member>
        <member name="M:ShopFlow.Application.Commands.Categories.DeleteCategoryCommand.#ctor(System.Int64)">
            <summary>
            Command for deleting a category
            </summary>
            <param name="Id">The category ID to delete</param>
        </member>
        <member name="P:ShopFlow.Application.Commands.Categories.DeleteCategoryCommand.Id">
            <summary>The category ID to delete</summary>
        </member>
        <member name="T:ShopFlow.Application.Commands.Categories.UpdateCategoryCommand">
            <summary>
            Command for updating an existing category
            </summary>
            <param name="Id">The category ID</param>
            <param name="Name">The category name</param>
            <param name="Slug">The category slug</param>
            <param name="Description">The category description</param>
            <param name="ParentId">The parent category ID (optional)</param>
            <param name="SortOrder">The sort order</param>
            <param name="ImageUrl">The category image URL (optional)</param>
            <param name="IconUrl">The category icon URL (optional)</param>
        </member>
        <member name="M:ShopFlow.Application.Commands.Categories.UpdateCategoryCommand.#ctor(System.Int64,System.String,System.String,System.String,System.Nullable{System.Int64},System.Int32,System.String,System.String)">
            <summary>
            Command for updating an existing category
            </summary>
            <param name="Id">The category ID</param>
            <param name="Name">The category name</param>
            <param name="Slug">The category slug</param>
            <param name="Description">The category description</param>
            <param name="ParentId">The parent category ID (optional)</param>
            <param name="SortOrder">The sort order</param>
            <param name="ImageUrl">The category image URL (optional)</param>
            <param name="IconUrl">The category icon URL (optional)</param>
        </member>
        <member name="P:ShopFlow.Application.Commands.Categories.UpdateCategoryCommand.Id">
            <summary>The category ID</summary>
        </member>
        <member name="P:ShopFlow.Application.Commands.Categories.UpdateCategoryCommand.Name">
            <summary>The category name</summary>
        </member>
        <member name="P:ShopFlow.Application.Commands.Categories.UpdateCategoryCommand.Slug">
            <summary>The category slug</summary>
        </member>
        <member name="P:ShopFlow.Application.Commands.Categories.UpdateCategoryCommand.Description">
            <summary>The category description</summary>
        </member>
        <member name="P:ShopFlow.Application.Commands.Categories.UpdateCategoryCommand.ParentId">
            <summary>The parent category ID (optional)</summary>
        </member>
        <member name="P:ShopFlow.Application.Commands.Categories.UpdateCategoryCommand.SortOrder">
            <summary>The sort order</summary>
        </member>
        <member name="P:ShopFlow.Application.Commands.Categories.UpdateCategoryCommand.ImageUrl">
            <summary>The category image URL (optional)</summary>
        </member>
        <member name="P:ShopFlow.Application.Commands.Categories.UpdateCategoryCommand.IconUrl">
            <summary>The category icon URL (optional)</summary>
        </member>
        <member name="T:ShopFlow.Application.Commands.Users.ForgotPasswordCommand">
            <summary>
            Command to initiate a password reset process by sending OTP to user's email
            </summary>
            <param name="Email">The email address to send the reset OTP to</param>
        </member>
        <member name="M:ShopFlow.Application.Commands.Users.ForgotPasswordCommand.#ctor(System.String)">
            <summary>
            Command to initiate a password reset process by sending OTP to user's email
            </summary>
            <param name="Email">The email address to send the reset OTP to</param>
        </member>
        <member name="P:ShopFlow.Application.Commands.Users.ForgotPasswordCommand.Email">
            <summary>The email address to send the reset OTP to</summary>
        </member>
        <member name="T:ShopFlow.Application.Commands.Users.ForgotPasswordResponse">
            <summary>
            Response for the forgot password command
            </summary>
            <param name="Success">Whether the request was successful</param>
            <param name="Message">Status message</param>
            <param name="ExpiresInMinutes">Time until OTP expires (only if successful)</param>
        </member>
        <member name="M:ShopFlow.Application.Commands.Users.ForgotPasswordResponse.#ctor(System.Boolean,System.String,System.Nullable{System.Int32})">
            <summary>
            Response for the forgot password command
            </summary>
            <param name="Success">Whether the request was successful</param>
            <param name="Message">Status message</param>
            <param name="ExpiresInMinutes">Time until OTP expires (only if successful)</param>
        </member>
        <member name="P:ShopFlow.Application.Commands.Users.ForgotPasswordResponse.Success">
            <summary>Whether the request was successful</summary>
        </member>
        <member name="P:ShopFlow.Application.Commands.Users.ForgotPasswordResponse.Message">
            <summary>Status message</summary>
        </member>
        <member name="P:ShopFlow.Application.Commands.Users.ForgotPasswordResponse.ExpiresInMinutes">
            <summary>Time until OTP expires (only if successful)</summary>
        </member>
        <member name="T:ShopFlow.Application.Commands.Users.LoginCommand">
            <summary>
            Command to authenticate a user
            </summary>
        </member>
        <member name="M:ShopFlow.Application.Commands.Users.LoginCommand.#ctor(System.String,System.String)">
            <summary>
            Command to authenticate a user
            </summary>
        </member>
        <member name="T:ShopFlow.Application.Commands.Users.RegisterUserCommand">
            <summary>
            Command to register a new user
            </summary>
        </member>
        <member name="M:ShopFlow.Application.Commands.Users.RegisterUserCommand.#ctor(System.String,System.String,System.String,System.String,System.String,System.Nullable{System.DateTime})">
            <summary>
            Command to register a new user
            </summary>
        </member>
        <member name="T:ShopFlow.Application.Commands.Users.ResetPasswordCommand">
            <summary>
            Command to reset user password using OTP verification
            </summary>
            <param name="Email">The email address of the user</param>
            <param name="OtpCode">The OTP code received via email</param>
            <param name="NewPassword">The new password to set</param>
        </member>
        <member name="M:ShopFlow.Application.Commands.Users.ResetPasswordCommand.#ctor(System.String,System.String,System.String)">
            <summary>
            Command to reset user password using OTP verification
            </summary>
            <param name="Email">The email address of the user</param>
            <param name="OtpCode">The OTP code received via email</param>
            <param name="NewPassword">The new password to set</param>
        </member>
        <member name="P:ShopFlow.Application.Commands.Users.ResetPasswordCommand.Email">
            <summary>The email address of the user</summary>
        </member>
        <member name="P:ShopFlow.Application.Commands.Users.ResetPasswordCommand.OtpCode">
            <summary>The OTP code received via email</summary>
        </member>
        <member name="P:ShopFlow.Application.Commands.Users.ResetPasswordCommand.NewPassword">
            <summary>The new password to set</summary>
        </member>
        <member name="T:ShopFlow.Application.Commands.Users.ResetPasswordResponse">
            <summary>
            Response for the reset password command
            </summary>
            <param name="Success">Whether the password reset was successful</param>
            <param name="Message">Status message</param>
        </member>
        <member name="M:ShopFlow.Application.Commands.Users.ResetPasswordResponse.#ctor(System.Boolean,System.String)">
            <summary>
            Response for the reset password command
            </summary>
            <param name="Success">Whether the password reset was successful</param>
            <param name="Message">Status message</param>
        </member>
        <member name="P:ShopFlow.Application.Commands.Users.ResetPasswordResponse.Success">
            <summary>Whether the password reset was successful</summary>
        </member>
        <member name="P:ShopFlow.Application.Commands.Users.ResetPasswordResponse.Message">
            <summary>Status message</summary>
        </member>
        <member name="T:ShopFlow.Application.Contracts.Requests.ForgotPasswordRequest">
            <summary>
            Request to initiate a password reset process
            </summary>
        </member>
        <member name="P:ShopFlow.Application.Contracts.Requests.ForgotPasswordRequest.Email">
            <summary>
            The email address to send the reset OTP to
            </summary>
        </member>
        <member name="T:ShopFlow.Application.Contracts.Requests.LoginRequest">
            <summary>
            Request model for user login
            </summary>
        </member>
        <member name="P:ShopFlow.Application.Contracts.Requests.LoginRequest.Email">
            <summary>
            User's email address
            </summary>
        </member>
        <member name="P:ShopFlow.Application.Contracts.Requests.LoginRequest.Password">
            <summary>
            User's password
            </summary>
        </member>
        <member name="T:ShopFlow.Application.Contracts.Requests.RegisterUserRequest">
            <summary>
            Request model for user registration
            </summary>
        </member>
        <member name="P:ShopFlow.Application.Contracts.Requests.RegisterUserRequest.Email">
            <summary>
            Gets or sets the email address
            </summary>
        </member>
        <member name="P:ShopFlow.Application.Contracts.Requests.RegisterUserRequest.Password">
            <summary>
            Gets or sets the password
            </summary>
        </member>
        <member name="P:ShopFlow.Application.Contracts.Requests.RegisterUserRequest.Phone">
            <summary>
            Gets or sets the phone number (optional)
            </summary>
        </member>
        <member name="P:ShopFlow.Application.Contracts.Requests.RegisterUserRequest.FullName">
            <summary>
            Gets or sets the full name (optional)
            </summary>
        </member>
        <member name="P:ShopFlow.Application.Contracts.Requests.RegisterUserRequest.Gender">
            <summary>
            Gets or sets the gender (optional)
            </summary>
        </member>
        <member name="P:ShopFlow.Application.Contracts.Requests.RegisterUserRequest.DateOfBirth">
            <summary>
            Gets or sets the date of birth (optional)
            </summary>
        </member>
        <member name="T:ShopFlow.Application.Contracts.Requests.ResetPasswordRequest">
            <summary>
            Request to reset user password using OTP verification
            </summary>
        </member>
        <member name="P:ShopFlow.Application.Contracts.Requests.ResetPasswordRequest.Email">
            <summary>
            The email address of the user
            </summary>
        </member>
        <member name="P:ShopFlow.Application.Contracts.Requests.ResetPasswordRequest.OtpCode">
            <summary>
            The OTP code received via email
            </summary>
        </member>
        <member name="P:ShopFlow.Application.Contracts.Requests.ResetPasswordRequest.NewPassword">
            <summary>
            The new password to set
            </summary>
        </member>
        <member name="P:ShopFlow.Application.Contracts.Requests.ResetPasswordRequest.ConfirmPassword">
            <summary>
            Confirmation of the new password
            </summary>
        </member>
        <member name="T:ShopFlow.Application.Contracts.Response.CategoryResponse">
            <summary>
            Response model for category information
            </summary>
        </member>
        <member name="P:ShopFlow.Application.Contracts.Response.CategoryResponse.Id">
            <summary>
            Category identifier
            </summary>
        </member>
        <member name="P:ShopFlow.Application.Contracts.Response.CategoryResponse.Name">
            <summary>
            Category name
            </summary>
        </member>
        <member name="P:ShopFlow.Application.Contracts.Response.CategoryResponse.Slug">
            <summary>
            Category slug
            </summary>
        </member>
        <member name="P:ShopFlow.Application.Contracts.Response.CategoryResponse.Description">
            <summary>
            Category description
            </summary>
        </member>
        <member name="P:ShopFlow.Application.Contracts.Response.CategoryResponse.ParentId">
            <summary>
            Parent category identifier
            </summary>
        </member>
        <member name="P:ShopFlow.Application.Contracts.Response.CategoryResponse.SortOrder">
            <summary>
            Sort order
            </summary>
        </member>
        <member name="P:ShopFlow.Application.Contracts.Response.CategoryResponse.ImageUrl">
            <summary>
            Category image URL
            </summary>
        </member>
        <member name="P:ShopFlow.Application.Contracts.Response.CategoryResponse.IconUrl">
            <summary>
            Category icon URL
            </summary>
        </member>
        <member name="P:ShopFlow.Application.Contracts.Response.CategoryResponse.Status">
            <summary>
            Category status
            </summary>
        </member>
        <member name="P:ShopFlow.Application.Contracts.Response.CategoryResponse.IsActive">
            <summary>
            Whether the category is active
            </summary>
        </member>
        <member name="P:ShopFlow.Application.Contracts.Response.CategoryResponse.CreatedAt">
            <summary>
            Creation timestamp
            </summary>
        </member>
        <member name="P:ShopFlow.Application.Contracts.Response.CategoryResponse.UpdatedAt">
            <summary>
            Last update timestamp
            </summary>
        </member>
        <member name="T:ShopFlow.Application.Contracts.Response.CategoryHierarchyResponse">
            <summary>
            Response model for category hierarchy
            </summary>
        </member>
        <member name="P:ShopFlow.Application.Contracts.Response.CategoryHierarchyResponse.Children">
            <summary>
            Child categories
            </summary>
        </member>
        <member name="P:ShopFlow.Application.Contracts.Response.CategoryHierarchyResponse.HasChildren">
            <summary>
            Whether this category has children
            </summary>
        </member>
        <member name="P:ShopFlow.Application.Contracts.Response.CategoryHierarchyResponse.Level">
            <summary>
            Depth level in the hierarchy (root = 0)
            </summary>
        </member>
        <member name="T:ShopFlow.Application.Contracts.Response.CategoryListResponse">
            <summary>
            Response model for category list with pagination
            </summary>
        </member>
        <member name="P:ShopFlow.Application.Contracts.Response.CategoryListResponse.Categories">
            <summary>
            List of categories
            </summary>
        </member>
        <member name="P:ShopFlow.Application.Contracts.Response.CategoryListResponse.TotalCount">
            <summary>
            Total count of categories
            </summary>
        </member>
        <member name="P:ShopFlow.Application.Contracts.Response.CategoryListResponse.Page">
            <summary>
            Current page number
            </summary>
        </member>
        <member name="P:ShopFlow.Application.Contracts.Response.CategoryListResponse.PageSize">
            <summary>
            Page size
            </summary>
        </member>
        <member name="P:ShopFlow.Application.Contracts.Response.CategoryListResponse.TotalPages">
            <summary>
            Total pages
            </summary>
        </member>
        <member name="P:ShopFlow.Application.Contracts.Response.CategoryListResponse.HasNext">
            <summary>
            Whether there are more pages
            </summary>
        </member>
        <member name="P:ShopFlow.Application.Contracts.Response.CategoryListResponse.HasPrevious">
            <summary>
            Whether there are previous pages
            </summary>
        </member>
        <member name="T:ShopFlow.Application.Contracts.Response.LoginResponse">
            <summary>
            Response model for successful user login
            </summary>
        </member>
        <member name="P:ShopFlow.Application.Contracts.Response.LoginResponse.AccessToken">
            <summary>
            JWT access token for authentication
            </summary>
        </member>
        <member name="P:ShopFlow.Application.Contracts.Response.LoginResponse.RefreshToken">
            <summary>
            Refresh token for renewing access tokens
            </summary>
        </member>
        <member name="P:ShopFlow.Application.Contracts.Response.LoginResponse.ExpiresAt">
            <summary>
            Token expiration time in UTC
            </summary>
        </member>
        <member name="P:ShopFlow.Application.Contracts.Response.LoginResponse.User">
            <summary>
            User information
            </summary>
        </member>
        <member name="T:ShopFlow.Application.Contracts.Response.UserInfo">
            <summary>
            User information included in login response
            </summary>
        </member>
        <member name="P:ShopFlow.Application.Contracts.Response.UserInfo.Id">
            <summary>
            User ID
            </summary>
        </member>
        <member name="P:ShopFlow.Application.Contracts.Response.UserInfo.Email">
            <summary>
            User's email address
            </summary>
        </member>
        <member name="P:ShopFlow.Application.Contracts.Response.UserInfo.FullName">
            <summary>
            User's full name
            </summary>
        </member>
        <member name="P:ShopFlow.Application.Contracts.Response.UserInfo.Roles">
            <summary>
            User roles
            </summary>
        </member>
        <member name="P:ShopFlow.Application.Contracts.Response.UserInfo.PrimaryRole">
            <summary>
            Primary role for determining default page/dashboard
            </summary>
        </member>
        <member name="T:ShopFlow.Application.Contracts.Response.ForgotPasswordResponse">
            <summary>
            Response for forgot password request
            </summary>
        </member>
        <member name="P:ShopFlow.Application.Contracts.Response.ForgotPasswordResponse.Success">
            <summary>
            Whether the request was successful
            </summary>
        </member>
        <member name="P:ShopFlow.Application.Contracts.Response.ForgotPasswordResponse.Message">
            <summary>
            Status message
            </summary>
        </member>
        <member name="P:ShopFlow.Application.Contracts.Response.ForgotPasswordResponse.ExpiresInMinutes">
            <summary>
            Time until OTP expires in minutes (only if successful)
            </summary>
        </member>
        <member name="T:ShopFlow.Application.Contracts.Response.ResetPasswordResponse">
            <summary>
            Response for reset password request
            </summary>
        </member>
        <member name="P:ShopFlow.Application.Contracts.Response.ResetPasswordResponse.Success">
            <summary>
            Whether the password reset was successful
            </summary>
        </member>
        <member name="P:ShopFlow.Application.Contracts.Response.ResetPasswordResponse.Message">
            <summary>
            Status message
            </summary>
        </member>
        <member name="T:ShopFlow.Application.ServiceCollectionExtensions">
            <summary>
            Extension methods for IServiceCollection to configure Application services
            </summary>
        </member>
        <member name="M:ShopFlow.Application.ServiceCollectionExtensions.AddApplication(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds Application layer services to the DI container
            </summary>
            <param name="services">The service collection to add services to</param>
            <returns>The service collection for chaining</returns>
        </member>
        <member name="T:ShopFlow.Application.Exceptions.AuthenticationException">
            <summary>
            Exception thrown when authentication fails
            </summary>
        </member>
        <member name="T:ShopFlow.Application.Exceptions.EmailAlreadyExistsException">
            <summary>
            Exception thrown when attempting to register with an email that already exists
            </summary>
        </member>
        <member name="M:ShopFlow.Application.Exceptions.EmailAlreadyExistsException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the EmailAlreadyExistsException class
            </summary>
            <param name="email">The email that already exists</param>
        </member>
        <member name="P:ShopFlow.Application.Exceptions.EmailAlreadyExistsException.Email">
            <summary>
            Gets the email that already exists
            </summary>
        </member>
        <member name="T:ShopFlow.Application.Handlers.Categories.ActivateCategoryCommandHandler">
            <summary>
            Handler for activating a category
            </summary>
        </member>
        <member name="T:ShopFlow.Application.Handlers.Categories.CreateCategoryCommandHandler">
            <summary>
            Handler for creating a new category
            </summary>
        </member>
        <member name="T:ShopFlow.Application.Handlers.Categories.DeactivateCategoryCommandHandler">
            <summary>
            Handler for deactivating a category
            </summary>
        </member>
        <member name="T:ShopFlow.Application.Handlers.Categories.DeleteCategoryCommandHandler">
            <summary>
            Handler for deleting a category
            </summary>
        </member>
        <member name="T:ShopFlow.Application.Handlers.Categories.GetCategoryBySlugQueryHandler">
            <summary>
            Handler for getting a category by slug
            </summary>
        </member>
        <member name="T:ShopFlow.Application.Handlers.Categories.GetCategoryQueryHandler">
            <summary>
            Handler for getting a category by ID
            </summary>
        </member>
        <member name="T:ShopFlow.Application.Handlers.Categories.GetChildCategoriesQueryHandler">
            <summary>
            Handler for getting child categories
            </summary>
        </member>
        <member name="T:ShopFlow.Application.Handlers.Categories.GetRootCategoriesQueryHandler">
            <summary>
            Handler for getting root categories
            </summary>
        </member>
        <member name="T:ShopFlow.Application.Handlers.Categories.UpdateCategoryCommandHandler">
            <summary>
            Handler for updating an existing category
            </summary>
        </member>
        <member name="T:ShopFlow.Application.Handlers.Users.ForgotPasswordCommandHandler">
            <summary>
            Handler for the ForgotPasswordCommand
            </summary>
        </member>
        <member name="M:ShopFlow.Application.Handlers.Users.ForgotPasswordCommandHandler.#ctor(ShopFlow.Application.Abstractions.Repositories.IUserRepository,ShopFlow.Application.Abstractions.Repositories.IPasswordResetTokenRepository,ShopFlow.Application.Abstractions.Services.IEmailService,ShopFlow.Application.Abstractions.Services.IOtpService,ShopFlow.Application.Abstractions.Messaging.IDomainEventPublisher,Microsoft.Extensions.Logging.ILogger{ShopFlow.Application.Handlers.Users.ForgotPasswordCommandHandler})">
            <summary>
            Initializes a new instance of the ForgotPasswordCommandHandler
            </summary>
        </member>
        <member name="M:ShopFlow.Application.Handlers.Users.ForgotPasswordCommandHandler.Handle(ShopFlow.Application.Commands.Users.ForgotPasswordCommand,System.Threading.CancellationToken)">
            <summary>
            Handles the forgot password command
            </summary>
        </member>
        <member name="T:ShopFlow.Application.Handlers.Users.LoginCommandHandler">
            <summary>
            Handler for LoginCommand
            </summary>
        </member>
        <member name="M:ShopFlow.Application.Handlers.Users.LoginCommandHandler.#ctor(ShopFlow.Application.Abstractions.Repositories.IUserRepository,ShopFlow.Application.Abstractions.Security.IPasswordHasher,ShopFlow.Application.Abstractions.Security.IJwtTokenService,ShopFlow.Application.Abstractions.Services.IUserRoleService,Microsoft.Extensions.Logging.ILogger{ShopFlow.Application.Handlers.Users.LoginCommandHandler})">
            <summary>
            Initializes a new instance of the LoginCommandHandler class
            </summary>
        </member>
        <member name="M:ShopFlow.Application.Handlers.Users.LoginCommandHandler.Handle(ShopFlow.Application.Commands.Users.LoginCommand,System.Threading.CancellationToken)">
            <summary>
            Handles the LoginCommand
            </summary>
        </member>
        <member name="T:ShopFlow.Application.Handlers.Users.RegisterUserCommandHandler">
            <summary>
            Handler for RegisterUserCommand
            </summary>
        </member>
        <member name="M:ShopFlow.Application.Handlers.Users.RegisterUserCommandHandler.#ctor(ShopFlow.Application.Abstractions.Repositories.IUserRepository,ShopFlow.Application.Abstractions.Security.IPasswordHasher,ShopFlow.Application.Abstractions.Messaging.IDomainEventPublisher,Microsoft.Extensions.Logging.ILogger{ShopFlow.Application.Handlers.Users.RegisterUserCommandHandler})">
            <summary>
            Initializes a new instance of the RegisterUserCommandHandler class
            </summary>
            <param name="userRepository">User repository</param>
            <param name="passwordHasher">Password hasher service</param>
            <param name="domainEventPublisher">Domain event publisher</param>
            <param name="logger">Logger instance</param>
        </member>
        <member name="M:ShopFlow.Application.Handlers.Users.RegisterUserCommandHandler.Handle(ShopFlow.Application.Commands.Users.RegisterUserCommand,System.Threading.CancellationToken)">
            <summary>
            Handles the RegisterUserCommand
            </summary>
            <param name="request">The registration command</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>User response</returns>
        </member>
        <member name="T:ShopFlow.Application.Handlers.Users.ResetPasswordCommandHandler">
            <summary>
            Handler for the ResetPasswordCommand
            </summary>
        </member>
        <member name="M:ShopFlow.Application.Handlers.Users.ResetPasswordCommandHandler.#ctor(ShopFlow.Application.Abstractions.Repositories.IUserRepository,ShopFlow.Application.Abstractions.Repositories.IPasswordResetTokenRepository,ShopFlow.Application.Abstractions.Security.IPasswordHasher,ShopFlow.Application.Abstractions.Services.IEmailService,ShopFlow.Application.Abstractions.Messaging.IDomainEventPublisher,Microsoft.Extensions.Logging.ILogger{ShopFlow.Application.Handlers.Users.ResetPasswordCommandHandler})">
            <summary>
            Initializes a new instance of the ResetPasswordCommandHandler
            </summary>
        </member>
        <member name="M:ShopFlow.Application.Handlers.Users.ResetPasswordCommandHandler.Handle(ShopFlow.Application.Commands.Users.ResetPasswordCommand,System.Threading.CancellationToken)">
            <summary>
            Handles the reset password command
            </summary>
        </member>
        <member name="T:ShopFlow.Application.Queries.Categories.GetAllCategoriesQuery">
            <summary>
            Query for getting all categories with pagination and filtering
            </summary>
            <param name="Page">Page number (default: 1)</param>
            <param name="PageSize">Page size (default: 10)</param>
            <param name="SearchTerm">Search term for name filtering</param>
            <param name="ParentId">Filter by parent category ID</param>
            <param name="IsActive">Filter by active status</param>
            <param name="SortBy">Sort field (name, createdAt, sortOrder)</param>
            <param name="SortDirection">Sort direction (asc, desc)</param>
        </member>
        <member name="M:ShopFlow.Application.Queries.Categories.GetAllCategoriesQuery.#ctor(System.Int32,System.Int32,System.String,System.Nullable{System.Int64},System.Nullable{System.Boolean},System.String,System.String)">
            <summary>
            Query for getting all categories with pagination and filtering
            </summary>
            <param name="Page">Page number (default: 1)</param>
            <param name="PageSize">Page size (default: 10)</param>
            <param name="SearchTerm">Search term for name filtering</param>
            <param name="ParentId">Filter by parent category ID</param>
            <param name="IsActive">Filter by active status</param>
            <param name="SortBy">Sort field (name, createdAt, sortOrder)</param>
            <param name="SortDirection">Sort direction (asc, desc)</param>
        </member>
        <member name="P:ShopFlow.Application.Queries.Categories.GetAllCategoriesQuery.Page">
            <summary>Page number (default: 1)</summary>
        </member>
        <member name="P:ShopFlow.Application.Queries.Categories.GetAllCategoriesQuery.PageSize">
            <summary>Page size (default: 10)</summary>
        </member>
        <member name="P:ShopFlow.Application.Queries.Categories.GetAllCategoriesQuery.SearchTerm">
            <summary>Search term for name filtering</summary>
        </member>
        <member name="P:ShopFlow.Application.Queries.Categories.GetAllCategoriesQuery.ParentId">
            <summary>Filter by parent category ID</summary>
        </member>
        <member name="P:ShopFlow.Application.Queries.Categories.GetAllCategoriesQuery.IsActive">
            <summary>Filter by active status</summary>
        </member>
        <member name="P:ShopFlow.Application.Queries.Categories.GetAllCategoriesQuery.SortBy">
            <summary>Sort field (name, createdAt, sortOrder)</summary>
        </member>
        <member name="P:ShopFlow.Application.Queries.Categories.GetAllCategoriesQuery.SortDirection">
            <summary>Sort direction (asc, desc)</summary>
        </member>
        <member name="T:ShopFlow.Application.Queries.Categories.GetCategoryBySlugQuery">
            <summary>
            Query for getting a category by slug
            </summary>
            <param name="Slug">The category slug</param>
        </member>
        <member name="M:ShopFlow.Application.Queries.Categories.GetCategoryBySlugQuery.#ctor(System.String)">
            <summary>
            Query for getting a category by slug
            </summary>
            <param name="Slug">The category slug</param>
        </member>
        <member name="P:ShopFlow.Application.Queries.Categories.GetCategoryBySlugQuery.Slug">
            <summary>The category slug</summary>
        </member>
        <member name="T:ShopFlow.Application.Queries.Categories.GetCategoryHierarchyQuery">
            <summary>
            Query for getting category hierarchy tree
            </summary>
        </member>
        <member name="T:ShopFlow.Application.Queries.Categories.GetCategoryQuery">
            <summary>
            Query for getting a category by ID
            </summary>
            <param name="Id">The category ID</param>
        </member>
        <member name="M:ShopFlow.Application.Queries.Categories.GetCategoryQuery.#ctor(System.Int64)">
            <summary>
            Query for getting a category by ID
            </summary>
            <param name="Id">The category ID</param>
        </member>
        <member name="P:ShopFlow.Application.Queries.Categories.GetCategoryQuery.Id">
            <summary>The category ID</summary>
        </member>
        <member name="T:ShopFlow.Application.Queries.Categories.GetChildCategoriesQuery">
            <summary>
            Query for getting child categories of a parent
            </summary>
            <param name="ParentId">The parent category ID</param>
        </member>
        <member name="M:ShopFlow.Application.Queries.Categories.GetChildCategoriesQuery.#ctor(System.Int64)">
            <summary>
            Query for getting child categories of a parent
            </summary>
            <param name="ParentId">The parent category ID</param>
        </member>
        <member name="P:ShopFlow.Application.Queries.Categories.GetChildCategoriesQuery.ParentId">
            <summary>The parent category ID</summary>
        </member>
        <member name="T:ShopFlow.Application.Queries.Categories.GetRootCategoriesQuery">
            <summary>
            Query for getting all root categories (categories without parent)
            </summary>
        </member>
        <member name="T:ShopFlow.Application.Validators.Users.ForgotPasswordCommandValidator">
            <summary>
            Validator for the ForgotPasswordCommand
            </summary>
        </member>
        <member name="M:ShopFlow.Application.Validators.Users.ForgotPasswordCommandValidator.#ctor">
            <summary>
            Initializes a new instance of the ForgotPasswordCommandValidator
            </summary>
        </member>
        <member name="M:ShopFlow.Application.Validators.Users.ForgotPasswordCommandValidator.BeValidEmailFormat(System.String)">
            <summary>
            Validates if the email format is valid using the Email value object
            </summary>
            <param name="email">The email to validate</param>
            <returns>True if valid, false otherwise</returns>
        </member>
        <member name="T:ShopFlow.Application.Validators.Users.LoginCommandValidator">
            <summary>
            Validator for LoginCommand
            </summary>
        </member>
        <member name="M:ShopFlow.Application.Validators.Users.LoginCommandValidator.#ctor">
            <summary>
            Initializes a new instance of the LoginCommandValidator class
            </summary>
        </member>
        <member name="M:ShopFlow.Application.Validators.Users.LoginCommandValidator.BeValidEmail(System.String)">
            <summary>
            Validates if the email format is correct
            </summary>
        </member>
        <member name="T:ShopFlow.Application.Validators.Users.RegisterUserCommandValidator">
            <summary>
            Validator for RegisterUserCommand
            </summary>
        </member>
        <member name="M:ShopFlow.Application.Validators.Users.RegisterUserCommandValidator.#ctor">
            <summary>
            Initializes a new instance of the RegisterUserCommandValidator class
            </summary>
        </member>
        <member name="T:ShopFlow.Application.Validators.Users.ResetPasswordCommandValidator">
            <summary>
            Validator for the ResetPasswordCommand
            </summary>
        </member>
        <member name="M:ShopFlow.Application.Validators.Users.ResetPasswordCommandValidator.#ctor">
            <summary>
            Initializes a new instance of the ResetPasswordCommandValidator
            </summary>
        </member>
        <member name="M:ShopFlow.Application.Validators.Users.ResetPasswordCommandValidator.BeValidEmailFormat(System.String)">
            <summary>
            Validates if the email format is valid using the Email value object
            </summary>
            <param name="email">The email to validate</param>
            <returns>True if valid, false otherwise</returns>
        </member>
        <member name="M:ShopFlow.Application.Validators.Users.ResetPasswordCommandValidator.BeValidOtpFormat(System.String)">
            <summary>
            Validates if the OTP code format is valid using the OtpCode value object
            </summary>
            <param name="otpCode">The OTP code to validate</param>
            <returns>True if valid, false otherwise</returns>
        </member>
    </members>
</doc>
