name: 🔍 Pull Request Validation

on:
  pull_request:
    branches: [ main, develop ]
    types: [ opened, synchronize, reopened, ready_for_review ]

concurrency:
  group: pr-${{ github.event.pull_request.number }}
  cancel-in-progress: true

env:
  DOTNET_VERSION: '9.0.x'
  SOLUTION_FILE: 'ShopFlow/ShopFlow.sln'

jobs:
  # Fast feedback for PRs
  pr-validation:
    name: 🚀 PR Quick Validation
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
    - name: 📥 Checkout PR
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.head.sha }}
        fetch-depth: 0

    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: 📦 Cache Dependencies
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}

    - name: 🔄 Restore Dependencies
      run: |
        cd ShopFlow
        dotnet restore ${{ env.SOLUTION_FILE }}

    - name: 🏗️ Build Solution
      run: |
        cd ShopFlow
        dotnet build ${{ env.SOLUTION_FILE }} --configuration Debug --no-restore

    - name: 🧪 Run Fast Tests
      run: |
        cd ShopFlow
        dotnet test --configuration Debug --no-build --verbosity normal --filter "Category!=Integration"

    - name: 📋 Check Code Format
      run: |
        dotnet tool install -g dotnet-format
        cd ShopFlow
        dotnet format --verify-no-changes --verbosity normal

  # Detailed analysis for important PRs
  pr-detailed-analysis:
    name: 🔍 Detailed PR Analysis
    runs-on: ubuntu-latest
    if: |
      github.event.pull_request.draft == false && 
      contains(github.event.pull_request.labels.*.name, 'needs-review')
    
    steps:
    - name: 📥 Checkout PR
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.head.sha }}
        fetch-depth: 0

    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: 🧪 Full Test Suite
      run: |
        cd ShopFlow
        dotnet restore ${{ env.SOLUTION_FILE }}
        dotnet test --configuration Debug --collect:"XPlat Code Coverage" --results-directory ./TestResults

    - name: 📊 Generate PR Coverage Report
      run: |
        dotnet tool install -g dotnet-reportgenerator-globaltool
        cd ShopFlow
        reportgenerator \
          -reports:"TestResults/**/coverage.cobertura.xml" \
          -targetdir:"CoverageReports" \
          -reporttypes:"MarkdownSummaryGithub"

    - name: 💬 Comment Coverage on PR
      uses: marocchino/sticky-pull-request-comment@v2
      with:
        header: coverage-report
        path: ShopFlow/CoverageReports/SummaryGithub.md

  # Security check for PRs
  pr-security-check:
    name: 🔒 Security Check
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
    - name: 📥 Checkout PR
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.head.sha }}

    - name: 🔍 GitLeaks Scan
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: 🔒 Trivy Security Scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: 📤 Upload Trivy Results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
