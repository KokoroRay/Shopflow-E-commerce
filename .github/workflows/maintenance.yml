name: 🔧 Maintenance & Monitoring

on:
  schedule:
    # Daily at 2 AM UTC
    - cron: "0 2 * * *"
    # Weekly dependency check on Sundays
    - cron: "0 4 * * 0"
  workflow_dispatch:
    inputs:
      task:
        description: "Maintenance Task"
        required: true
        type: choice
        options:
          - dependency-check
          - security-scan
          - performance-test
          - cleanup-artifacts
          - backup-check

env:
  DOTNET_VERSION: "9.0.x"

jobs:
  # Daily dependency and security check
  dependency-security-check:
    name: 🔍 Dependency & Security Check
    runs-on: ubuntu-latest
    if: |
      github.event.schedule == '0 2 * * *' || 
      github.event.inputs.task == 'dependency-check' ||
      github.event.inputs.task == 'security-scan'

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔧 Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: 🔍 Dependency Vulnerability Scan
        run: |
          cd ShopFlow
          dotnet list package --vulnerable --include-transitive > vulnerability-report.txt

          if grep -q "vulnerable" vulnerability-report.txt; then
            echo "⚠️ Vulnerable dependencies found!" >> $GITHUB_STEP_SUMMARY
            echo "```" >> $GITHUB_STEP_SUMMARY
            cat vulnerability-report.txt >> $GITHUB_STEP_SUMMARY
            echo "```" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ No vulnerable dependencies found" >> $GITHUB_STEP_SUMMARY
          fi

      - name: 📊 Dependency Outdated Check
        run: |
          cd ShopFlow
          dotnet list package --outdated > outdated-report.txt

          echo "## 📦 Outdated Dependencies" >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY
          cat outdated-report.txt >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY

      - name: 🔒 Security Audit with Snyk
        uses: snyk/actions/dotnet@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium --json > snyk-report.json

      - name: 📤 Upload Security Reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports-${{ github.run_number }}
          path: |
            ShopFlow/vulnerability-report.txt
            ShopFlow/outdated-report.txt
            snyk-report.json
          retention-days: 30

      - name: 📧 Create Security Issue
        if: contains(steps.*.outputs.*, 'vulnerable')
        uses: actions/github-script@v7
        with:
          script: |
            const title = `🚨 Security Alert: Vulnerable Dependencies Detected`;
            const body = `
            ## Security Alert

            Automated security scan detected vulnerable dependencies in the ShopFlow project.

            **Scan Date**: ${new Date().toISOString()}
            **Workflow Run**: [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

            Please review the vulnerability report and update dependencies as needed.

            ### Next Steps:
            1. Review the vulnerability report in the workflow artifacts
            2. Update vulnerable packages to safe versions
            3. Test the application thoroughly
            4. Deploy the updates

            _This issue was automatically created by the maintenance workflow._
            `;

            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'security,automated',
              state: 'open'
            });

            if (issues.length === 0) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['security', 'automated', 'high-priority']
              });
            }

  # Performance monitoring and testing
  performance-monitoring:
    name: ⚡ Performance Monitoring
    runs-on: ubuntu-latest
    if: |
      github.event.schedule == '0 2 * * *' || 
      github.event.inputs.task == 'performance-test'

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: shopflow_test
          POSTGRES_PASSWORD: test_password_123
          POSTGRES_DB: shopflow_perf_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔧 Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: 🏗️ Build Application
        run: |
          cd ShopFlow
          dotnet restore
          dotnet build --configuration Release

      - name: 🚀 Start Application
        run: |
          cd ShopFlow
          dotnet run --project ShopFlow.API/ShopFlow.API.csproj --configuration Release &
          sleep 30  # Wait for application to start

      - name: ⚡ Run Performance Tests
        run: |
          # Install Artillery for load testing
          npm install -g artillery

          # Create performance test configuration
          cat > performance-test.yml << EOF
          config:
            target: 'http://localhost:5000'
            phases:
              - duration: 60
                arrivalRate: 10
            defaults:
              headers:
                Content-Type: 'application/json'
          scenarios:
            - name: 'Health Check Load Test'
              requests:
                - get:
                    url: '/health'
            - name: 'API Load Test'
              requests:
                - get:
                    url: '/api/users'
          EOF

          # Run performance test
          artillery run performance-test.yml --output performance-report.json

      - name: 📊 Generate Performance Report
        run: |
          artillery report performance-report.json --output performance-report.html

          # Extract key metrics
          echo "## ⚡ Performance Test Results" >> $GITHUB_STEP_SUMMARY
          echo "**Test Date**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "**Duration**: 60 seconds" >> $GITHUB_STEP_SUMMARY
          echo "**Rate**: 10 requests/second" >> $GITHUB_STEP_SUMMARY

          # Parse JSON report for metrics (simplified)
          if [ -f "performance-report.json" ]; then
            echo "📁 Performance report generated successfully" >> $GITHUB_STEP_SUMMARY
          fi

      - name: 📤 Upload Performance Report
        uses: actions/upload-artifact@v4
        with:
          name: performance-report-${{ github.run_number }}
          path: |
            performance-report.json
            performance-report.html
          retention-days: 30

  # Cleanup old artifacts and caches
  cleanup-artifacts:
    name: 🧹 Cleanup Artifacts
    runs-on: ubuntu-latest
    if: |
      github.event.schedule == '0 4 * * 0' || 
      github.event.inputs.task == 'cleanup-artifacts'

    steps:
      - name: 🧹 Delete Old Workflow Runs
        uses: actions/github-script@v7
        with:
          script: |
            const { data: runs } = await github.rest.actions.listWorkflowRunsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });

            const cutoffDate = new Date();
            cutoffDate.setDate(cutoffDate.getDate() - 30); // Keep last 30 days

            let deletedCount = 0;
            for (const run of runs.workflow_runs) {
              const runDate = new Date(run.created_at);
              if (runDate < cutoffDate && run.status === 'completed') {
                try {
                  await github.rest.actions.deleteWorkflowRun({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    run_id: run.id
                  });
                  deletedCount++;
                } catch (error) {
                  console.log(`Failed to delete run ${run.id}: ${error.message}`);
                }
              }
            }

            console.log(`Deleted ${deletedCount} old workflow runs`);

      - name: 📊 Cleanup Summary
        run: |
          echo "## 🧹 Cleanup Results" >> $GITHUB_STEP_SUMMARY
          echo "- Cleaned up workflow runs older than 30 days" >> $GITHUB_STEP_SUMMARY
          echo "- Freed up storage space" >> $GITHUB_STEP_SUMMARY
          echo "- **Date**: $(date)" >> $GITHUB_STEP_SUMMARY

  # Health check of deployed environments
  environment-health-check:
    name: 🏥 Environment Health Check
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 2 * * *'

    strategy:
      matrix:
        environment:
          - name: development
            url: https://dev.shopflow.example.com
          - name: staging
            url: https://staging.shopflow.example.com
          - name: production
            url: https://shopflow.example.com

    steps:
      - name: 🏥 Check ${{ matrix.environment.name }} Health
        run: |
          echo "Checking ${{ matrix.environment.name }} environment..."

          # Basic health check
          if curl -f -s "${{ matrix.environment.url }}/health" > /dev/null; then
            echo "✅ ${{ matrix.environment.name }} is healthy"
            STATUS="healthy"
          else
            echo "❌ ${{ matrix.environment.name }} is unhealthy"
            STATUS="unhealthy"
          fi

          # API health check
          if curl -f -s "${{ matrix.environment.url }}/api/health" > /dev/null; then
            echo "✅ ${{ matrix.environment.name }} API is healthy"
            API_STATUS="healthy"
          else
            echo "❌ ${{ matrix.environment.name }} API is unhealthy"
            API_STATUS="unhealthy"
          fi

          echo "STATUS=$STATUS" >> $GITHUB_ENV
          echo "API_STATUS=$API_STATUS" >> $GITHUB_ENV

      - name: 📊 Update Health Status
        run: |
          echo "## 🏥 Environment Health Status" >> $GITHUB_STEP_SUMMARY
          echo "| Environment | Status | API Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------------|--------|------------|" >> $GITHUB_STEP_SUMMARY
          echo "| ${{ matrix.environment.name }} | ${{ env.STATUS == 'healthy' && '✅ Healthy' || '❌ Unhealthy' }} | ${{ env.API_STATUS == 'healthy' && '✅ Healthy' || '❌ Unhealthy' }} |" >> $GITHUB_STEP_SUMMARY

      - name: 🚨 Create Alert Issue
        if: env.STATUS == 'unhealthy' || env.API_STATUS == 'unhealthy'
        uses: actions/github-script@v7
        with:
          script: |
            const title = `🚨 Health Alert: ${{ matrix.environment.name }} Environment Issue`;
            const body = `
            ## Environment Health Alert

            **Environment**: ${{ matrix.environment.name }}
            **URL**: ${{ matrix.environment.url }}
            **Check Time**: ${new Date().toISOString()}

            **Status**:
            - Main Health: ${{ env.STATUS }}
            - API Health: ${{ env.API_STATUS }}

            ### Immediate Actions Required:
            1. Check application logs
            2. Verify database connectivity
            3. Check external service dependencies
            4. Review recent deployments

            **Monitoring Dashboard**: [View Details](https://monitoring.shopflow.example.com)

            _This alert was automatically generated by the maintenance workflow._
            `;

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['alert', 'health-check', 'urgent', `env:${{ matrix.environment.name }}`]
            });

  # Weekly summary report
  weekly-summary:
    name: 📊 Weekly Summary Report
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 4 * * 0'

    steps:
      - name: 📊 Generate Weekly Summary
        uses: actions/github-script@v7
        with:
          script: |
            const oneWeekAgo = new Date();
            oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);

            // Get workflow runs from last week
            const { data: runs } = await github.rest.actions.listWorkflowRunsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              created: `>=${oneWeekAgo.toISOString()}`,
              per_page: 100
            });

            const successfulRuns = runs.workflow_runs.filter(run => run.conclusion === 'success').length;
            const failedRuns = runs.workflow_runs.filter(run => run.conclusion === 'failure').length;
            const totalRuns = runs.workflow_runs.length;

            const successRate = totalRuns > 0 ? ((successfulRuns / totalRuns) * 100).toFixed(1) : 0;

            // Create summary issue
            const title = `📊 Weekly Report - ${new Date().toISOString().split('T')[0]}`;
            const body = `
            ## 📊 ShopFlow Weekly Summary Report

            **Week Ending**: ${new Date().toISOString().split('T')[0]}

            ### 🏗️ Build & Deployment Stats
            - **Total Workflow Runs**: ${totalRuns}
            - **Successful**: ${successfulRuns} ✅
            - **Failed**: ${failedRuns} ❌
            - **Success Rate**: ${successRate}%

            ### 📈 Metrics
            ${successRate >= 95 ? '🟢 Excellent build reliability' : successRate >= 90 ? '🟡 Good build reliability' : '🔴 Build reliability needs attention'}

            ### 🔄 Recommendations
            ${successRate < 95 ? '- Review and fix failing workflows\n- Improve test coverage\n- Optimize build performance' : '- Continue current practices\n- Monitor for improvements'}

            ---
            _Generated automatically by maintenance workflow_
            `;

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['report', 'weekly-summary', 'automated']
            });

            console.log(`Weekly summary created with ${totalRuns} runs, ${successRate}% success rate`);

      - name: 📊 Summary Complete
        run: |
          echo "## 📊 Weekly Summary Generated" >> $GITHUB_STEP_SUMMARY
          echo "Weekly report issue created with build statistics and recommendations." >> $GITHUB_STEP_SUMMARY
